{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"An\u00e1lise de Dados BITA","text":""},{"location":"index.html#visao-geral","title":"Vis\u00e3o Geral","text":"<p>Este \u00e9 um projeto Django que fornece diversas API's e pipelines para an\u00e1lise de dados do BITA. O projeto \u00e9 organizado em tr\u00eas principais aplica\u00e7\u00f5es por ora:</p> <ul> <li>Access: Gerenciamento de autentica\u00e7\u00e3o e usu\u00e1rios</li> <li>DW Analytics: An\u00e1lise de dados do Data Warehouse</li> <li>Power BI: Integra\u00e7\u00e3o com Power BI e an\u00e1lises espec\u00edficas</li> </ul>"},{"location":"index.html#estrutura-detalhada-do-projeto","title":"Estrutura Detalhada do Projeto","text":"<pre><code>src/\n\u251c\u2500\u2500 access/                     # App de autentica\u00e7\u00e3o e usu\u00e1rios\n\u2502   \u251c\u2500\u2500 api/                   \n\u2502   \u2502   \u251c\u2500\u2500 views/            \n\u2502   \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 user_views.py \n\u2502   \u2502   \u2514\u2500\u2500 urls.py\n\u2502   \u251c\u2500\u2500 migrations/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 0001_initial.py          # Cria\u00e7\u00e3o do modelo User\n\u2502   \u2502   \u251c\u2500\u2500 0002_user_full_name.py   # Adi\u00e7\u00e3o do campo full_name\n\u2502   \u2502   \u2514\u2500\u2500 0003_user_company.py     # Adi\u00e7\u00e3o do campo company_name\n\u2502   \u251c\u2500\u2500 models/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 user.py           # Modelo personalizado de usu\u00e1rio\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 admin.py              # Configura\u00e7\u00f5es do admin\n\u2502   \u251c\u2500\u2500 apps.py              \n\u2502   \u2514\u2500\u2500 forms.py              # Formul\u00e1rios personalizados\n\u251c\u2500\u2500 app/                       # Configura\u00e7\u00f5es principais\n\u2502   \u251c\u2500\u2500 settings.py           # Configura\u00e7\u00f5es do Django\n\u2502   \u251c\u2500\u2500 urls.py               # URLs principais\n\u2502   \u251c\u2500\u2500 wsgi.py               # Configura\u00e7\u00e3o WSGI\n\u2502   \u251c\u2500\u2500 asgi.py               # Configura\u00e7\u00e3o ASGI\n\u2502   \u251c\u2500\u2500 database_router.py    # Router para m\u00faltiplos bancos\n\u2502   \u251c\u2500\u2500 utils/                # Utilit\u00e1rios\n\u2502   \u2502    \u251c\u2500\u2500 __init__.py\n\u2502   \u2502    \u251c\u2500\u2500 pipeline.py       # Pipeline base para processamento de dados\n\u2502   \u2502    \u2514\u2500\u2500 paginators.py     # Classe para fazer pagina\u00e7\u00e3o de querys.\n\u251c\u2500\u2500 dw_analytics/              # App de an\u00e1lise do Data Warehouse\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 admin.py\n\u2502   \u251c\u2500\u2500 apps.py\n\u2502   \u251c\u2500\u2500 tests.py\n\u2502   \u251c\u2500\u2500 migrations/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500  0001_initial.py\n\u2502   \u2502   \u251c\u2500\u2500  0002_fincidentsbita_updated_at.py\n\u2502   \u2502   \u251c\u2500\u2500  0004_remove_fincidentsbita_updated_at.py\n\u2502   \u2502   \u251c\u2500\u2500  0004_remove_fincidentsbita_updated_at.py\n\u2502   \u2502   \u251c\u2500\u2500  0005_alter_fincidentsbita_id.py\n\u2502   \u2502   \u251c\u2500\u2500  0006_fincidentsbita_updated_at_alter_fincidentsbita_id.py\n\u2502   \u251c\u2500\u2500 models/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 d_assignment_group.py\n\u2502   \u2502   \u251c\u2500\u2500 d_company.py\n\u2502   \u2502   \u251c\u2500\u2500 d_contract.py\n\u2502   \u2502   \u251c\u2500\u2500 d_operacao.py\n\u2502   \u2502   \u251c\u2500\u2500 d_premissas.py\n\u2502   \u2502   \u251c\u2500\u2500 d_resolved_by.py\n\u2502   \u2502   \u251c\u2500\u2500 d_resolved_by_assignment_group.py\n\u2502   \u2502   \u251c\u2500\u2500 d_sorted_ticket.py\n\u2502   \u2502   \u251c\u2500\u2500 f_incident.py\n\u2502   \u2502   \u251c\u2500\u2500 f_incident_bita.py\n\u2502   \u2502   \u251c\u2500\u2500 f_incident_task.py\n\u2502   \u2502   \u251c\u2500\u2500 f_planta_vgr.py\n\u2502   \u2502   \u2514\u2500\u2500 f_sae_localidades.py\n\u2502   \u251c\u2500\u2500 api/\n\u2502   \u2502   \u251c\u2500\u2500 serializers/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 f_incidents_bita_serizalizer.py\n\u2502   \u2502   \u251c\u2500\u2500 views/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 f_incidents_bita_viewset.py\n\u2502   \u2502   \u2514\u2500\u2500 urls.py\n\u251c\u2500\u2500 power_bi/                  # App de integra\u00e7\u00e3o com Power BI\n\u2502   \u251c\u2500\u2500 admin.py\n\u2502   \u251c\u2500\u2500 apps.py\n\u2502   \u251c\u2500\u2500 tests.py\n\u2502   \u251c\u2500\u2500 migrations/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 0001_initial.py\n\u2502   \u2502   \u251c\u2500\u2500 0002_rename_munic\u00fdpio_tblsolarinterfacesvgr_municipio.py\n\u2502   \u2502   \u251c\u2500\u2500 0003_alter_tblsolarinterfacesvgr_municipio.py\n\u2502   \u2502   \u251c\u2500\u2500 0004_solaridvgrinterfacecorrigido.py\n\u2502   \u2502   \u251c\u2500\u2500 0005_alter_solaridvgrinterfacecorrigido_company_remedy_and_more.py\n\u2502   \u2502   \u251c\u2500\u2500 0006_solaridvgrinterfacecorrigido_historico_ids.py\n\u2502   \u2502   \u251c\u2500\u2500 0007_alter_solaridvgrinterfacecorrigido_historico_ids.py\n\u2502   \u2502   \u2514\u2500\u2500 0008_alter_solaridvgrinterfacecorrigido_velocidade.py\n\u2502   \u251c\u2500\u2500 models/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 demais_models.py\n\u2502   \u2502   \u251c\u2500\u2500 solaridvgrinterfacecorrigido.py\n\u2502   \u2502   \u2514\u2500\u2500 tblsolarinterfacesvgr.py\n\u2502   \u251c\u2500\u2500 api/\n\u2502   \u2502   \u251c\u2500\u2500 serializers/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 solar_new_id_serializer.py\n\u2502   \u2502   \u251c\u2500\u2500 views/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 solar_id_vgr_interface_vgr_corrigido_viewset.py\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 solar_interfaces_vgr.py\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 load_interfaces_new_id.py\n\u2502   \u2502   \u2514\u2500\u2500 urls.py\n\u2502   \u251c\u2500\u2500 tasks/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 load_interface_new_id.py\n\u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 mixin.py\n\u2514\u2500\u2500 manage.py                 # Script de gerenciamento Django\n</code></pre>"},{"location":"index.html#configuracao-do-ambiente","title":"Configura\u00e7\u00e3o do Ambiente","text":"<ol> <li>Clone o reposit\u00f3rio</li> <li> <p>Crie um ambiente virtual <pre><code>python -m venv venv\nsource venv/bin/activate  # Linux/Mac\nvenv\\Scripts\\activate     # Windows\n</code></pre></p> </li> <li> <p>Instale as depend\u00eancias <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Configure as vari\u00e1veis de ambiente (.env) <pre><code>DB_NAME_APLICATION=nome_banco\nDB_NAME_DW_ANALYTICS=nome_dw\nDB_NAME_POWER_BI=nome_powerbi\nDB_USER=usuario\nDB_PASSWORD=senha\nDB_HOST=servidor\nDB_PORT=1433\nDB_DRIVER=SQL Server Native Client 11.0\n</code></pre></p> </li> <li> <p>Execute as migra\u00e7\u00f5es <pre><code>python manage.py migrate\n</code></pre></p> </li> </ol>"},{"location":"index.html#executando-o-projeto","title":"Executando o Projeto","text":"<p>Para iniciar o servidor de desenvolvimento:</p> <pre><code>python manage.py runserver\n</code></pre> <p>O servidor backend estar\u00e1 dispon\u00edvel em <code>http://localhost:8000/</code></p>"},{"location":"app/index.html","title":"Documenta\u00e7\u00e3o do M\u00f3dulo <code>app</code>","text":"<p>Este m\u00f3dulo cont\u00e9m a configura\u00e7\u00e3o principal do projeto Django, incluindo roteamento, configura\u00e7\u00e3o de bancos de dados, middlewares, settings globais e utilit\u00e1rios.</p>"},{"location":"app/index.html#arquivos-principais","title":"Arquivos Principais","text":"<ul> <li><code>asgi.py</code>: Interface ass\u00edncrona do Django.</li> <li><code>wsgi.py</code>: Interface s\u00edncrona (WSGI) do Django.</li> <li><code>settings.py</code>: Configura\u00e7\u00f5es globais do projeto.</li> <li><code>urls.py</code>: Roteamento principal do projeto.</li> <li><code>database_router.py</code>: Roteamento de m\u00faltiplos bancos de dados.</li> </ul>"},{"location":"app/index.html#estrutura-de-utilitarios","title":"Estrutura de Utilit\u00e1rios","text":"<p>Veja tamb\u00e9m a documenta\u00e7\u00e3o em <code>utils/</code> para detalhes sobre utilit\u00e1rios como pipelines e pagina\u00e7\u00e3o. - Define a vari\u00e1vel <code>application</code> para uso por servidores WSGI. - Carrega as configura\u00e7\u00f5es do Django a partir de <code>app.settings</code>.</p>"},{"location":"app/index.html#settingspy","title":"<code>settings.py</code>","text":"<p>Arquivo central de configura\u00e7\u00e3o do Django. Define todas as configura\u00e7\u00f5es globais do projeto, incluindo:</p> <ul> <li>Caminhos de diret\u00f3rios (<code>BASE_DIR</code>)</li> <li>Configura\u00e7\u00f5es de banco de dados (multi-database)</li> <li>Apps instalados</li> <li>Middlewares</li> <li>Configura\u00e7\u00f5es de autentica\u00e7\u00e3o, CORS, REST Framework, arquivos est\u00e1ticos e media</li> <li>Configura\u00e7\u00f5es de internacionaliza\u00e7\u00e3o e timezone</li> </ul>"},{"location":"app/index.html#urlspy","title":"<code>urls.py</code>","text":"<p>Arquivo de roteamento principal do projeto. Define as rotas globais, incluindo:</p> <ul> <li>Rota para o admin (<code>/admin/</code>)</li> <li>Inclus\u00e3o das rotas dos apps: <code>access</code>, <code>power_bi</code>, <code>dw_analytics</code></li> </ul>"},{"location":"app/index.html#database_routerpy","title":"<code>database_router.py</code>","text":"<p>Define a classe <code>MultiDBRouter</code>, respons\u00e1vel por direcionar opera\u00e7\u00f5es de leitura, escrita e migra\u00e7\u00e3o para os bancos corretos conforme o app/model.</p> <ul> <li>Permite m\u00faltiplos bancos de dados no projeto.</li> <li>Direciona opera\u00e7\u00f5es de <code>dw_analytics</code> e <code>power_bi</code> para seus respectivos bancos.</li> <li>Permite rela\u00e7\u00f5es apenas entre objetos do mesmo banco.</li> </ul>"},{"location":"app/index.html#estrutura-de-utilitarios_1","title":"Estrutura de Utilit\u00e1rios","text":"<p>Veja tamb\u00e9m a documenta\u00e7\u00e3o em <code>utils/</code> para detalhes sobre utilit\u00e1rios como pipelines e pagina\u00e7\u00e3o.</p>"},{"location":"app/asgi.html","title":"<code>asgi.py</code>","text":""},{"location":"app/asgi.html#o-que-e","title":"O que \u00e9?","text":"<p>Arquivo de configura\u00e7\u00e3o para ASGI (Asynchronous Server Gateway Interface), padr\u00e3o moderno para aplica\u00e7\u00f5es Python ass\u00edncronas.</p>"},{"location":"app/asgi.html#para-que-serve","title":"Para que serve?","text":"<p>Permite que o Django rode em servidores ass\u00edncronos, suportando WebSockets, HTTP2 e outras features modernas.</p>"},{"location":"app/asgi.html#trecho-de-codigo-explicado","title":"Trecho de c\u00f3digo explicado","text":"<p><pre><code>import os\nfrom django.core.asgi import get_asgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'app.settings')\napplication = get_asgi_application()\n</code></pre> - Define a vari\u00e1vel de ambiente para as configura\u00e7\u00f5es do Django. - Cria a aplica\u00e7\u00e3o ASGI a partir das configura\u00e7\u00f5es.</p>"},{"location":"app/asgi.html#o-que-pode-e-nao-pode-alterar","title":"O que pode e n\u00e3o pode alterar","text":"<ul> <li>Pode: Alterar o nome do m\u00f3dulo de settings se o projeto mudar de estrutura.</li> <li>N\u00e3o pode: Remover a defini\u00e7\u00e3o de <code>application</code>, pois \u00e9 o ponto de entrada do servidor ASGI.</li> </ul>"},{"location":"app/asgi.html#por-que","title":"Por qu\u00ea?","text":"<p>A aus\u00eancia ou altera\u00e7\u00e3o incorreta deste arquivo impede o deploy em servidores ass\u00edncronos.</p>"},{"location":"app/database_router.html","title":"<code>database_router.py</code>","text":""},{"location":"app/database_router.html#o-que-e","title":"O que \u00e9?","text":"<p>Arquivo que define a l\u00f3gica de roteamento para m\u00faltiplos bancos de dados no Django.</p>"},{"location":"app/database_router.html#para-que-serve","title":"Para que serve?","text":"<p>Permite que diferentes apps usem diferentes bancos de dados para leitura, escrita e migra\u00e7\u00e3o.</p>"},{"location":"app/database_router.html#trecho-de-codigo-explicado","title":"Trecho de c\u00f3digo explicado","text":"<p><pre><code>class MultiDBRouter:\ndef db_for_read(self, model, **hints):\nif model._meta.app_label == \"dw_analytics\":\nreturn \"dw_analytics\"\nelif model._meta.app_label == \"power_bi\":\nreturn \"power_bi\"\nreturn None\n# ... outros m\u00e9todos ...\n</code></pre> - Direciona opera\u00e7\u00f5es de leitura/escrita/migra\u00e7\u00e3o para o banco correto com base no app.</p>"},{"location":"app/database_router.html#o-que-pode-e-nao-pode-alterar","title":"O que pode e n\u00e3o pode alterar","text":"<ul> <li>Pode: Adicionar novas regras para novos apps/bancos.</li> <li>N\u00e3o pode: Remover m\u00e9todos obrigat\u00f3rios (<code>db_for_read</code>, <code>db_for_write</code>, <code>allow_migrate</code>).</li> </ul>"},{"location":"app/database_router.html#por-que","title":"Por qu\u00ea?","text":"<p>Sem esses m\u00e9todos, o Django n\u00e3o consegue decidir para qual banco enviar as opera\u00e7\u00f5es, podendo causar erros graves.</p>"},{"location":"app/settings.html","title":"<code>settings.py</code>","text":""},{"location":"app/settings.html#o-que-e","title":"O que \u00e9?","text":"<p>Arquivo central de configura\u00e7\u00e3o do Django. Ele define todas as vari\u00e1veis e par\u00e2metros que controlam o funcionamento do projeto, desde bancos de dados at\u00e9 autentica\u00e7\u00e3o, localiza\u00e7\u00e3o, arquivos est\u00e1ticos e apps instalados.</p>"},{"location":"app/settings.html#para-que-serve","title":"Para que serve?","text":"<ul> <li>Centralizar todas as configura\u00e7\u00f5es do projeto.</li> <li>Permitir f\u00e1cil customiza\u00e7\u00e3o do ambiente (desenvolvimento, produ\u00e7\u00e3o, testes).</li> <li>Garantir que todos os apps e integra\u00e7\u00f5es funcionem corretamente.</li> </ul>"},{"location":"app/settings.html#explicacao-ponto-a-ponto","title":"Explica\u00e7\u00e3o ponto a ponto","text":""},{"location":"app/settings.html#1-imports-e-carregamento-de-variaveis-de-ambiente","title":"1. Imports e carregamento de vari\u00e1veis de ambiente","text":"<p><pre><code>import os\nfrom pathlib import Path\nfrom dotenv import load_dotenv\nload_dotenv()\n</code></pre> - <code>os</code> e <code>Path</code> s\u00e3o usados para manipular caminhos e vari\u00e1veis do sistema. - <code>load_dotenv()</code> carrega vari\u00e1veis do arquivo <code>.env</code> para proteger dados sens\u00edveis (senhas, usu\u00e1rios, etc).</p>"},{"location":"app/settings.html#2-diretorio-base-do-projeto","title":"2. Diret\u00f3rio base do projeto","text":"<p><pre><code>BASE_DIR = Path(__file__).resolve().parent.parent\n</code></pre> - Define o diret\u00f3rio raiz do projeto, usado para construir caminhos relativos (ex: arquivos est\u00e1ticos, media).</p>"},{"location":"app/settings.html#3-seguranca","title":"3. Seguran\u00e7a","text":"<p><pre><code>SECRET_KEY = \"django-insecure-...\"\nDEBUG = True\nALLOWED_HOSTS = []\n</code></pre> - <code>SECRET_KEY</code>: Chave secreta usada para criptografia interna do Django. - <code>DEBUG</code>: Ativa/desativa modo debug (NUNCA deixe True em produ\u00e7\u00e3o). - <code>ALLOWED_HOSTS</code>: Lista de dom\u00ednios permitidos para acessar o projeto.</p>"},{"location":"app/settings.html#4-apps-instalados","title":"4. Apps instalados","text":"<p><pre><code>INSTALLED_APPS = [\n\"django.contrib.admin\",\n\"django.contrib.auth\",\n\"django.contrib.contenttypes\",\n\"django.contrib.sessions\",\n\"django.contrib.messages\",\n\"django.contrib.staticfiles\",\n\"corsheaders\",  # CORS para requisi\u00e7\u00f5es externas\n\"rest_framework\",  # Django REST Framework\n\"django_filters\",  # Filtros para APIs\n\"rest_framework.authtoken\",  # Autentica\u00e7\u00e3o por token\n\"access\",  # App de autentica\u00e7\u00e3o customizado\n\"dw_analytics\",  # App de analytics\n\"power_bi\",  # App de integra\u00e7\u00e3o Power BI\n]\n</code></pre> - Cada string \u00e9 o nome de um app Django. - Para adicionar um novo app: crie o app com <code>python manage.py startapp nome_do_app</code> e adicione <code>\"nome_do_app\"</code> \u00e0 lista. - Por qu\u00ea?: S\u00f3 apps listados aqui s\u00e3o reconhecidos pelo Django (migra\u00e7\u00f5es, admin, etc).</p>"},{"location":"app/settings.html#5-middlewares","title":"5. Middlewares","text":"<p><pre><code>MIDDLEWARE = [\n\"corsheaders.middleware.CorsMiddleware\",\n\"django.middleware.security.SecurityMiddleware\",\n\"django.contrib.sessions.middleware.SessionMiddleware\",\n\"django.middleware.common.CommonMiddleware\",\n\"django.middleware.csrf.CsrfViewMiddleware\",\n\"django.contrib.auth.middleware.AuthenticationMiddleware\",\n\"django.contrib.messages.middleware.MessageMiddleware\",\n\"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n]\n</code></pre> - Middlewares s\u00e3o camadas intermedi\u00e1rias que processam requisi\u00e7\u00f5es e respostas. - Ordem importa: CORS deve vir antes de outros middlewares para funcionar corretamente.</p>"},{"location":"app/settings.html#6-urls-e-templates","title":"6. URLs e Templates","text":"<p><pre><code>ROOT_URLCONF = \"app.urls\"\nTEMPLATES = [\n{\n\"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n\"DIRS\": [],\n\"APP_DIRS\": True,\n\"OPTIONS\": {\n\"context_processors\": [\n\"django.template.context_processors.debug\",\n\"django.template.context_processors.request\",\n\"django.contrib.auth.context_processors.auth\",\n\"django.contrib.messages.context_processors.messages\",\n],\n},\n},\n]\nWSGI_APPLICATION = \"app.wsgi.application\"\n</code></pre> - <code>ROOT_URLCONF</code>: Arquivo principal de rotas. - <code>TEMPLATES</code>: Configura\u00e7\u00e3o do sistema de templates do Django. - <code>WSGI_APPLICATION</code>: Ponto de entrada para servidores WSGI.</p>"},{"location":"app/settings.html#7-bancos-de-dados","title":"7. Bancos de dados","text":"<p><pre><code>DATABASES = {\n\"default\": {\n\"ENGINE\": \"mssql\",\n\"NAME\": os.getenv(\"DB_NAME_APLICATION\"),\n\"USER\": os.getenv(\"DB_USER\"),\n\"PASSWORD\": os.getenv(\"DB_PASSWORD\"),\n\"HOST\": os.getenv(\"DB_HOST\"),\n\"PORT\": os.getenv(\"DB_PORT\", \"1433\"),\n\"OPTIONS\": {\n\"driver\": os.getenv(\"DB_DRIVER\", \"SQL Server Native Client 11.0\"),\n\"Trusted_Connection\": \"yes\",\n},\n},\n\"dw_analytics\": {...},\n\"power_bi\": {...},\n}\nDATABASE_ROUTERS = [\"app.database_router.MultiDBRouter\"]\n</code></pre> - Permite m\u00faltiplos bancos de dados, cada um com suas credenciais. - <code>DATABASE_ROUTERS</code> define a l\u00f3gica para direcionar queries para o banco correto. - N\u00e3o remova: Essencial para o funcionamento dos apps que usam bancos separados.</p>"},{"location":"app/settings.html#8-validacao-de-senha","title":"8. Valida\u00e7\u00e3o de senha","text":"<p><pre><code>AUTH_PASSWORD_VALIDATORS = [\n{\"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\"},\n{\"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\"},\n{\"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\"},\n{\"NAME\": \"django.contrib.auth.password_validation.NumericPasswordValidator\"},\n]\n</code></pre> - Define regras para senhas de usu\u00e1rios.</p>"},{"location":"app/settings.html#9-internacionalizacao","title":"9. Internacionaliza\u00e7\u00e3o","text":"<p><pre><code>LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n</code></pre> - Configura idioma e fuso hor\u00e1rio padr\u00e3o.</p>"},{"location":"app/settings.html#10-arquivos-estaticos-e-media","title":"10. Arquivos est\u00e1ticos e media","text":"<p><pre><code>STATIC_URL = \"static/\"\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = BASE_DIR / \"cadastro/arquivos\"\n</code></pre> - Define onde arquivos est\u00e1ticos e uploads de usu\u00e1rios s\u00e3o armazenados.</p>"},{"location":"app/settings.html#11-chave-primaria-padrao","title":"11. Chave prim\u00e1ria padr\u00e3o","text":"<p><pre><code>DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n</code></pre> - Define o tipo padr\u00e3o de campo para chaves prim\u00e1rias.</p>"},{"location":"app/settings.html#12-usuario-customizado","title":"12. Usu\u00e1rio customizado","text":"<p><pre><code>AUTH_USER_MODEL = \"access.User\"\n</code></pre> - Define o modelo de usu\u00e1rio customizado do app <code>access</code>.</p>"},{"location":"app/settings.html#13-cors","title":"13. CORS","text":"<p><pre><code>CORS_ALLOW_ALL_ORIGINS = True\nCORS_ALLOWED_ORIGINS = [\n\"http://localhost:5173\",\n\"http://127.0.0.1:5173\",\n]\n</code></pre> - Permite requisi\u00e7\u00f5es de origens externas (ex: frontend em React).</p>"},{"location":"app/settings.html#14-django-rest-framework","title":"14. Django REST Framework","text":"<p><pre><code>REST_FRAMEWORK = {\n\"DEFAULT_PAGINATION_CLASS\": \"rest_framework.pagination.PageNumberPagination\",\n\"PAGE_SIZE\": 50,\n\"DEFAULT_FILTER_BACKENDS\": [\n\"django_filters.rest_framework.DjangoFilterBackend\",\n\"rest_framework.filters.SearchFilter\",\n\"rest_framework.filters.OrderingFilter\",\n],\n\"DEFAULT_AUTHENTICATION_CLASSES\": [\n\"rest_framework.authentication.TokenAuthentication\",\n\"rest_framework.authentication.SessionAuthentication\",\n],\n\"DEFAULT_PERMISSION_CLASSES\": [\n\"rest_framework.permissions.IsAuthenticated\",\n],\n}\n</code></pre> - Configura pagina\u00e7\u00e3o, autentica\u00e7\u00e3o, filtros e permiss\u00f5es padr\u00e3o para APIs.</p>"},{"location":"app/settings.html#15-filtros","title":"15. Filtros","text":"<p><pre><code>FILTERS_DEFAULT_LOOKUP_EXPR = \"icontains\"\n</code></pre> - Define o lookup padr\u00e3o para filtros (busca insens\u00edvel a mai\u00fasculas/min\u00fasculas).</p>"},{"location":"app/settings.html#o-que-pode-e-nao-pode-alterar","title":"O que pode e n\u00e3o pode alterar","text":"<ul> <li>Pode:</li> <li>Adicionar apps em <code>INSTALLED_APPS</code>.</li> <li>Adicionar middlewares.</li> <li>Alterar vari\u00e1veis de ambiente para bancos de dados.</li> <li> <p>Customizar configura\u00e7\u00f5es do REST Framework conforme necessidade.</p> </li> <li> <p>N\u00e3o pode:</p> </li> <li>Remover vari\u00e1veis essenciais (<code>DATABASES</code>, <code>INSTALLED_APPS</code>, <code>ROOT_URLCONF</code>, <code>WSGI_APPLICATION</code>).</li> <li>Alterar <code>SECRET_KEY</code> em produ\u00e7\u00e3o sem migrar tokens/senhas.</li> <li>Deixar <code>DEBUG=True</code> em produ\u00e7\u00e3o.</li> </ul>"},{"location":"app/settings.html#como-adicionar-um-novo-app","title":"Como adicionar um novo app","text":"<ol> <li>Crie o app:    <pre><code>python manage.py startapp nome_do_app\n</code></pre></li> <li>Adicione <code>\"nome_do_app\"</code> em <code>INSTALLED_APPS</code>.</li> <li>(Opcional) Crie rotas e inclua no arquivo de URLs principal.</li> </ol> <p>Por qu\u00ea? Sem adicionar o app, o Django n\u00e3o reconhece modelos, rotas ou comandos do novo app.</p>"},{"location":"app/urls.html","title":"<code>urls.py</code>","text":""},{"location":"app/urls.html#o-que-e","title":"O que \u00e9?","text":"<p>Arquivo de roteamento principal do Django. Ele define como as URLs recebidas pelo servidor s\u00e3o encaminhadas para as views corretas do projeto.</p>"},{"location":"app/urls.html#para-que-serve","title":"Para que serve?","text":"<ul> <li>Centraliza o roteamento das requisi\u00e7\u00f5es HTTP.</li> <li>Permite incluir rotas de diferentes apps de forma modular.</li> <li>Facilita a manuten\u00e7\u00e3o e expans\u00e3o do projeto.</li> </ul>"},{"location":"app/urls.html#codigo-explicado","title":"C\u00f3digo explicado","text":"<pre><code>from django.contrib import admin\nfrom django.urls import include, path\nurlpatterns = [\npath(\"admin/\", admin.site.urls),\npath(\"api/access/\", include(\"access.api.urls\")),\npath(\"api/power-bi/\", include(\"power_bi.api.urls\")),\npath(\"api/dw-analytics/\", include(\"dw_analytics.api.urls\")),\n]\n</code></pre>"},{"location":"app/urls.html#linha-a-linha","title":"Linha a linha","text":"<ul> <li><code>from django.contrib import admin</code>: Importa o m\u00f3dulo de administra\u00e7\u00e3o do Django.</li> <li> <p><code>from django.urls import include, path</code>: Importa fun\u00e7\u00f5es para definir rotas (<code>path</code>) e incluir outros arquivos de rotas (<code>include</code>).</p> </li> <li> <p><code>urlpatterns = [...]</code>: Lista de todas as rotas do projeto.</p> <ul> <li><code>path(\"admin/\", admin.site.urls)</code>: Rota padr\u00e3o do Django Admin, acess\u00edvel em <code>/admin/</code>.</li> <li><code>path(\"api/access/\", include(\"access.api.urls\"))</code>: Inclui todas as rotas definidas em <code>access/api/urls.py</code> sob o prefixo <code>/api/access/</code>.</li> <li><code>path(\"api/power-bi/\", include(\"power_bi.api.urls\"))</code>: Inclui as rotas do app <code>power_bi</code> sob <code>/api/power-bi/</code>.</li> <li><code>path(\"api/dw-analytics/\", include(\"dw_analytics.api.urls\"))</code>: Inclui as rotas do app <code>dw_analytics</code> sob <code>/api/dw-analytics/</code>.</li> </ul> </li> </ul>"},{"location":"app/urls.html#como-adicionar-novas-urls","title":"Como adicionar novas URLs","text":""},{"location":"app/urls.html#1-criar-um-novo-app-se-necessario","title":"1. Criar um novo app (se necess\u00e1rio)","text":"<pre><code>python manage.py startapp meu_app\n</code></pre>"},{"location":"app/urls.html#2-criar-um-arquivo-de-rotas-no-app","title":"2. Criar um arquivo de rotas no app","text":"<p>No diret\u00f3rio do app, crie um arquivo <code>api/urls.py</code> (ou <code>urls.py</code>):</p> <pre><code>from django.urls import path\nfrom .views import MinhaView\nurlpatterns = [\npath(\"minha-rota/\", MinhaView.as_view(), name=\"minha-rota\"),\n]\n</code></pre>"},{"location":"app/urls.html#3-incluir-as-rotas-do-novo-app-no-urlspy-principal","title":"3. Incluir as rotas do novo app no <code>urls.py</code> principal","text":"<p>Adicione uma linha em <code>urlpatterns</code>:</p> <pre><code>path(\"api/meu-app/\", include(\"meu_app.api.urls\")),\n</code></pre> <p>Agora, todas as rotas definidas em <code>meu_app/api/urls.py</code> estar\u00e3o dispon\u00edveis sob <code>/api/meu-app/</code>.</p>"},{"location":"app/urls.html#o-que-pode-e-nao-pode-alterar","title":"O que pode e n\u00e3o pode alterar","text":"<ul> <li>Pode:</li> <li>Adicionar novas rotas com <code>path(...)</code>.</li> <li>Incluir rotas de novos apps usando <code>include(...)</code>.</li> <li>N\u00e3o pode:</li> <li>Remover o admin ou rotas essenciais sem saber as consequ\u00eancias.</li> <li>Alterar o nome dos arquivos de rotas sem atualizar os imports.</li> </ul>"},{"location":"app/urls.html#por-que","title":"Por qu\u00ea?","text":"<ul> <li>Remover rotas essenciais pode impedir o acesso ao admin ou APIs.</li> <li>Adicionar rotas corretamente mant\u00e9m o projeto organizado e modular.</li> </ul>"},{"location":"app/wsgi.html","title":"<code>wsgi.py</code>","text":""},{"location":"app/wsgi.html#o-que-e","title":"O que \u00e9?","text":"<p>Arquivo de configura\u00e7\u00e3o para WSGI (Web Server Gateway Interface), padr\u00e3o tradicional para aplica\u00e7\u00f5es web Python s\u00edncronas.</p>"},{"location":"app/wsgi.html#para-que-serve","title":"Para que serve?","text":"<p>Permite que o Django rode em servidores como Gunicorn, uWSGI, Apache mod_wsgi, etc.</p>"},{"location":"app/wsgi.html#trecho-de-codigo-explicado","title":"Trecho de c\u00f3digo explicado","text":"<p><pre><code>import os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'app.settings')\napplication = get_wsgi_application()\n</code></pre> - Define a vari\u00e1vel de ambiente para as configura\u00e7\u00f5es do Django. - Cria a aplica\u00e7\u00e3o WSGI a partir das configura\u00e7\u00f5es.</p>"},{"location":"app/wsgi.html#o-que-pode-e-nao-pode-alterar","title":"O que pode e n\u00e3o pode alterar","text":"<ul> <li>Pode: Alterar o nome do m\u00f3dulo de settings se necess\u00e1rio.</li> <li>N\u00e3o pode: Remover a defini\u00e7\u00e3o de <code>application</code>.</li> </ul>"},{"location":"app/wsgi.html#por-que","title":"Por qu\u00ea?","text":"<p>Sem esse arquivo, o deploy em servidores WSGI n\u00e3o funciona.</p>"},{"location":"app/utils/index.html","title":"Utilit\u00e1rios do App","text":"<p>Esta pasta cont\u00e9m utilit\u00e1rios reutiliz\u00e1veis para o projeto, como pipelines de processamento de dados e paginadores customizados.</p>"},{"location":"app/utils/index.html#submodulos","title":"Subm\u00f3dulos","text":"<ul> <li><code>pipeline.md</code>: Pipeline base para processamento de dados.</li> <li><code>paginators.md</code>: Paginadores customizados para APIs.</li> </ul> <p>Consulte cada arquivo para detalhes de implementa\u00e7\u00e3o e exemplos de uso.</p>"},{"location":"app/utils/index.html#como-importar-utilitarios","title":"Como importar utilit\u00e1rios","text":"<p>O arquivo <code>__init__.py</code> importa as classes utilit\u00e1rias principais, facilitando o uso em outros m\u00f3dulos:</p> <pre><code>from .pipeline import Pipeline\nfrom .paginators import CustomPagination, CustomLargePagination\n</code></pre> <p>Assim, basta importar diretamente:</p> <pre><code>from app.utils import Pipeline, CustomPagination\n</code></pre>"},{"location":"app/utils/__init__.html","title":"<code>__init__.py</code> dos utilit\u00e1rios","text":""},{"location":"app/utils/__init__.html#o-que-e","title":"O que \u00e9?","text":"<p>O arquivo <code>__init__.py</code> transforma a pasta <code>utils</code> em um m\u00f3dulo Python, permitindo importar utilit\u00e1rios diretamente do pacote. Ele centraliza os imports das classes utilit\u00e1rias do app.</p>"},{"location":"app/utils/__init__.html#para-que-serve","title":"Para que serve?","text":"<ul> <li>Facilita o import dos utilit\u00e1rios em outros arquivos (ex: views, tasks).</li> <li>Mant\u00e9m o c\u00f3digo organizado e evita importa\u00e7\u00f5es circulares.</li> <li>Permite importar todos os utilit\u00e1rios do app com uma \u00fanica linha.</li> </ul>"},{"location":"app/utils/__init__.html#exemplo-de-codigo","title":"Exemplo de c\u00f3digo","text":"<pre><code>from .pipeline import Pipeline\nfrom .paginators import CustomPagination, CustomLargePagination\n</code></pre> <ul> <li>Importa as classes utilit\u00e1rias do arquivo correspondente e as disponibiliza no pacote.</li> <li>Assim, em outros arquivos, pode-se importar diretamente:   <pre><code>from app.utils import Pipeline, CustomPagination\n</code></pre></li> </ul>"},{"location":"app/utils/__init__.html#funcionamento-esperado","title":"Funcionamento esperado","text":"<ul> <li>Ao adicionar novos utilit\u00e1rios, basta importar no <code>__init__.py</code> para que fiquem dispon\u00edveis no pacote.</li> <li>Mant\u00e9m a estrutura do projeto limpa e organizada.</li> </ul>"},{"location":"app/utils/__init__.html#o-que-pode-e-nao-pode-alterar","title":"O que pode e n\u00e3o pode alterar","text":"<ul> <li>Pode: Adicionar/remover imports conforme novos utilit\u00e1rios s\u00e3o criados ou removidos.</li> <li>N\u00e3o pode: Remover o arquivo <code>__init__.py</code> se quiser manter a pasta como m\u00f3dulo Python.</li> </ul>"},{"location":"app/utils/paginators.html","title":"Paginadores Customizados","text":"<p>Este m\u00f3dulo pode conter classes para pagina\u00e7\u00e3o customizada de querysets em APIs Django REST Framework.</p>"},{"location":"app/utils/paginators.html#possiveis-funcionalidades","title":"Poss\u00edveis funcionalidades","text":"<ul> <li>Pagina\u00e7\u00e3o baseada em n\u00famero de p\u00e1gina ou cursor.</li> <li>Customiza\u00e7\u00e3o de resposta (ex: incluir total de p\u00e1ginas, links de pr\u00f3xima/anterior p\u00e1gina).</li> <li>Integra\u00e7\u00e3o com filtros e ordena\u00e7\u00e3o.</li> </ul> <p>Consulte o c\u00f3digo para detalhes de implementa\u00e7\u00e3o e exemplos de uso.</p>"},{"location":"app/utils/paginators.html#paginatorspy","title":"<code>paginators.py</code>","text":""},{"location":"app/utils/paginators.html#o-que-e","title":"O que \u00e9?","text":"<p>Arquivo que define paginadores customizados para APIs Django REST Framework. Paginadores s\u00e3o respons\u00e1veis por dividir grandes conjuntos de dados em p\u00e1ginas menores, facilitando o consumo por aplica\u00e7\u00f5es frontend.</p>"},{"location":"app/utils/paginators.html#para-que-serve","title":"Para que serve?","text":"<ul> <li>Controlar o tamanho das respostas das APIs.</li> <li>Permitir ao usu\u00e1rio navegar entre p\u00e1ginas de resultados.</li> <li>Customizar o formato da resposta paginada.</li> </ul>"},{"location":"app/utils/paginators.html#codigo-explicado","title":"C\u00f3digo explicado","text":"<pre><code>from rest_framework.pagination import PageNumberPagination\nfrom rest_framework.response import Response\nclass CustomPagination(PageNumberPagination):\npage_size = 50\npage_size_query_param = \"page_size\"\nmax_page_size = 1_000\ndef get_paginated_response(self, data: dict) -&gt; Response:\nreturn Response(\n{\n\"count\": self.page.paginator.count,\n\"page_size\": self.page_size,\n\"next\": self.get_next_link(),\n\"previous\": self.get_previous_link(),\n\"total_pages\": self.page.paginator.num_pages,\n\"results\": data,\n}\n)\nclass CustomLargePagination(CustomPagination):\npage_size = 1_000\nmax_page_size = 10_000\n</code></pre>"},{"location":"app/utils/paginators.html#linha-a-linha","title":"Linha a linha","text":"<ul> <li><code>CustomPagination</code> herda de <code>PageNumberPagination</code>, o paginador padr\u00e3o do DRF.</li> <li><code>page_size = 50</code>: Define o tamanho padr\u00e3o da p\u00e1gina.</li> <li><code>page_size_query_param = \"page_size\"</code>: Permite ao usu\u00e1rio definir o tamanho da p\u00e1gina via query string (<code>?page_size=100</code>).</li> <li><code>max_page_size = 1_000</code>: Limita o tamanho m\u00e1ximo da p\u00e1gina.</li> <li><code>get_paginated_response</code>: Customiza a resposta, incluindo:</li> <li><code>count</code>: total de itens.</li> <li><code>page_size</code>: tamanho da p\u00e1gina.</li> <li><code>next</code>/<code>previous</code>: links para pr\u00f3xima/anterior p\u00e1gina.</li> <li><code>total_pages</code>: n\u00famero total de p\u00e1ginas.</li> <li> <p><code>results</code>: os dados da p\u00e1gina atual.</p> </li> <li> <p><code>CustomLargePagination</code> herda de <code>CustomPagination</code> e aumenta os limites para grandes volumes de dados.</p> </li> </ul>"},{"location":"app/utils/paginators.html#como-usar","title":"Como usar","text":"<p>No seu <code>settings.py</code>:</p> <pre><code>REST_FRAMEWORK = {\n\"DEFAULT_PAGINATION_CLASS\": \"app.utils.paginators.CustomPagination\",\n\"PAGE_SIZE\": 50,\n# ...\n}\n</code></pre> <p>Ou diretamente em uma view DRF:</p> <pre><code>from app.utils.paginators import CustomPagination\nclass MinhaViewSet(viewsets.ModelViewSet):\npagination_class = CustomPagination\n</code></pre>"},{"location":"app/utils/paginators.html#funcionamento-esperado","title":"Funcionamento esperado","text":"<ul> <li>Ao acessar uma rota paginada, a resposta ser\u00e1 um JSON com os campos definidos em <code>get_paginated_response</code>.</li> <li>O usu\u00e1rio pode navegar entre p\u00e1ginas usando os links <code>next</code> e <code>previous</code> e ajustar o tamanho da p\u00e1gina via <code>page_size</code>.</li> </ul>"},{"location":"app/utils/paginators.html#o-que-pode-e-nao-pode-alterar","title":"O que pode e n\u00e3o pode alterar","text":"<ul> <li>Pode: Customizar os campos retornados, alterar limites de p\u00e1gina, criar novos paginadores herdando de <code>CustomPagination</code>.</li> <li>N\u00e3o pode: Remover m\u00e9todos essenciais ou alterar a assinatura de <code>get_paginated_response</code> sem entender o impacto.</li> </ul>"},{"location":"app/utils/pipeline.html","title":"Pipeline Base","text":"<p>O pipeline define uma classe base para processamento de dados, padronizando logs de execu\u00e7\u00e3o e facilitando o uso de context manager (<code>with</code>).</p>"},{"location":"app/utils/pipeline.html#principais-funcionalidades","title":"Principais funcionalidades","text":"<ul> <li>Log autom\u00e1tico de inser\u00e7\u00f5es, dele\u00e7\u00f5es, in\u00edcio e fim do processamento.</li> <li>C\u00e1lculo autom\u00e1tico de dura\u00e7\u00e3o da execu\u00e7\u00e3o.</li> <li>Uso de <code>with Pipeline() as p:</code> para garantir logs mesmo em caso de erro.</li> </ul>"},{"location":"app/utils/pipeline.html#exemplo-de-uso","title":"Exemplo de uso","text":"<pre><code>from app.utils.pipeline import Pipeline\nwith Pipeline() as p:\n# processamento de dados\npass\nprint(p.log)\n</code></pre>"},{"location":"app/utils/pipeline.html#pipelinepy","title":"<code>pipeline.py</code>","text":""},{"location":"app/utils/pipeline.html#o-que-e","title":"O que \u00e9?","text":"<p>Classe utilit\u00e1ria para padronizar o processamento de dados em pipelines, especialmente para ETL (Extract, Transform, Load) ou tarefas de carga de dados.</p>"},{"location":"app/utils/pipeline.html#para-que-serve","title":"Para que serve?","text":"<ul> <li>Padronizar logs de execu\u00e7\u00e3o de pipelines.</li> <li>Medir tempo de execu\u00e7\u00e3o automaticamente.</li> <li>Facilitar o uso de context manager (<code>with</code>) para garantir logs mesmo em caso de erro.</li> </ul>"},{"location":"app/utils/pipeline.html#codigo-explicado","title":"C\u00f3digo explicado","text":"<pre><code>from django.utils import timezone\nclass Pipeline:\n\"\"\"Classe padr\u00e3o que generaliza os m\u00e9todos de todas as Pipelines de dados\"\"\"\ndef __init__(self, **kwargs):\nself.log = {\n'n_inserted': 0,\n'n_deleted': 0,\n'started_at': timezone.now(),\n'finished_at': None,\n'duration': None\n}\ndef __enter__(self):\nreturn self\ndef __exit__(self, exc_type, exc_value, traceback):\nself.log['finished_at'] = timezone.now()\nself.log['duration'] = (\nself.log['finished_at'] -\nself.log['started_at']).total_seconds()\n</code></pre>"},{"location":"app/utils/pipeline.html#linha-a-linha","title":"Linha a linha","text":"<ul> <li><code>__init__</code>: Inicializa o log da pipeline, marcando o in\u00edcio da execu\u00e7\u00e3o e zerando contadores de inser\u00e7\u00e3o/remo\u00e7\u00e3o.</li> <li><code>__enter__</code>: Permite o uso da classe com <code>with</code>, retornando a pr\u00f3pria inst\u00e2ncia.</li> <li><code>__exit__</code>: Ao sair do bloco <code>with</code>, registra o hor\u00e1rio de t\u00e9rmino e calcula a dura\u00e7\u00e3o total da execu\u00e7\u00e3o.</li> </ul>"},{"location":"app/utils/pipeline.html#como-usar","title":"Como usar","text":"<pre><code>from app.utils.pipeline import Pipeline\nwith Pipeline() as p:\n# Seu processamento de dados aqui\n# Exemplo: p.log['n_inserted'] += 100\npass\nprint(p.log)\n# Sa\u00edda esperada:\n# {\n#   'n_inserted': 100,\n#   'n_deleted': 0,\n#   'started_at': ...,\n#   'finished_at': ...,\n#   'duration': ...,\n# }\n</code></pre>"},{"location":"app/utils/pipeline.html#funcionamento-esperado","title":"Funcionamento esperado","text":"<ul> <li>O log \u00e9 preenchido automaticamente com in\u00edcio, fim e dura\u00e7\u00e3o.</li> <li>Voc\u00ea pode incrementar manualmente <code>n_inserted</code> e <code>n_deleted</code> conforme sua l\u00f3gica.</li> <li>Mesmo em caso de erro, o tempo de execu\u00e7\u00e3o ser\u00e1 registrado.</li> </ul>"},{"location":"app/utils/pipeline.html#o-que-pode-e-nao-pode-alterar","title":"O que pode e n\u00e3o pode alterar","text":"<ul> <li>Pode: Adicionar novos campos ao log, sobrescrever m\u00e9todos para customizar comportamento.</li> <li>N\u00e3o pode: Remover o uso de <code>__enter__</code> e <code>__exit__</code> se quiser manter o suporte ao context manager.</li> </ul>"},{"location":"auxiliares/index.html","title":"Auxiliares Python &amp; Django","text":"<p>Esta se\u00e7\u00e3o re\u00fane explica\u00e7\u00f5es e conceitos fundamentais para trabalhar com Django, sua ORM, integra\u00e7\u00e3o com bancos de dados, gera\u00e7\u00e3o de APIs REST, pipelines de dados e as principais bibliotecas utilizadas no projeto.</p>"},{"location":"auxiliares/index.html#como-funciona-o-django","title":"Como funciona o Django","text":"<p>Django \u00e9 um framework web em Python que segue o padr\u00e3o MTV (Model-Template-View). Ele facilita o desenvolvimento r\u00e1pido de aplica\u00e7\u00f5es web robustas, seguras e escal\u00e1veis.</p>"},{"location":"auxiliares/index.html#principais-caracteristicas","title":"Principais caracter\u00edsticas:","text":"<ul> <li>Estrutura modular e reutiliz\u00e1vel.</li> <li>Admin autom\u00e1tico.</li> <li>Sistema de autentica\u00e7\u00e3o pronto.</li> <li>Suporte a m\u00faltiplos bancos de dados.</li> <li>Integra\u00e7\u00e3o f\u00e1cil com APIs REST via Django REST Framework.</li> </ul>"},{"location":"auxiliares/index.html#django-como-orm","title":"Django como ORM","text":"<p>ORM (Object-Relational Mapping) \u00e9 uma camada que permite manipular dados do banco usando objetos Python, sem escrever SQL manualmente.</p> <ul> <li>Modelos Django representam tabelas do banco.</li> <li>QuerySets permitem consultar, filtrar, atualizar e deletar dados de forma orientada a objetos.</li> <li>Migrations sincronizam as altera\u00e7\u00f5es dos modelos com o banco de dados.</li> </ul> <p>Exemplo: <pre><code># models.py\nclass Cliente(models.Model):\nnome = models.CharField(max_length=100)\n# Consulta\nclientes = Cliente.objects.filter(nome__icontains=\"jo\u00e3o\")\n</code></pre></p>"},{"location":"auxiliares/index.html#integracao-com-banco-de-dados","title":"Integra\u00e7\u00e3o com banco de dados","text":"<ul> <li>O Django suporta diversos bancos (PostgreSQL, MySQL, SQLite, SQL Server).</li> <li>A configura\u00e7\u00e3o \u00e9 feita no arquivo <code>settings.py</code> em <code>DATABASES</code>.</li> <li>O projeto utiliza m\u00faltiplos bancos, roteados por app via <code>DATABASE_ROUTERS</code>.</li> </ul>"},{"location":"auxiliares/index.html#geracao-de-apis-rest","title":"Gera\u00e7\u00e3o de APIs REST","text":"<ul> <li>Utilizamos o Django REST Framework (DRF) para criar APIs RESTful.</li> <li>Serializers convertem modelos em JSON e vice-versa.</li> <li>ViewSets e Routers facilitam a cria\u00e7\u00e3o de endpoints CRUD.</li> <li>Permite autentica\u00e7\u00e3o, pagina\u00e7\u00e3o, filtros e permiss\u00f5es customizadas.</li> </ul> <p>Exemplo: <pre><code>from rest_framework import serializers, viewsets\nclass ClienteSerializer(serializers.ModelSerializer):\nclass Meta:\nmodel = Cliente\nfields = \"__all__\"\nclass ClienteViewSet(viewsets.ModelViewSet):\nqueryset = Cliente.objects.all()\nserializer_class = ClienteSerializer\n</code></pre></p>"},{"location":"auxiliares/index.html#pipelines-de-dados","title":"Pipelines de dados","text":"<ul> <li>Pipelines s\u00e3o classes utilit\u00e1rias para processar grandes volumes de dados, ETL (Extract, Transform, Load) e integra\u00e7\u00f5es.</li> <li>Utilizam a classe base <code>Pipeline</code> para padronizar logs e execu\u00e7\u00e3o.</li> <li>Podem ser usadas em tasks, comandos customizados ou integradas com Celery.</li> </ul>"},{"location":"auxiliares/index.html#bibliotecas-utilizadas-e-para-que-servem","title":"Bibliotecas utilizadas e para que servem","text":"<ul> <li>Django: Framework web principal.</li> <li>djangorestframework: Cria\u00e7\u00e3o de APIs REST.</li> <li>django-cors-headers: Permite requisi\u00e7\u00f5es de diferentes dom\u00ednios (CORS).</li> <li>django-filter: Filtros avan\u00e7ados em APIs.</li> <li>mssql-django: Suporte ao banco SQL Server.</li> <li>pyodbc: Driver ODBC para conex\u00e3o com SQL Server.</li> <li>polars: Processamento de dados em DataFrames de alta performance.</li> <li>pandas: Manipula\u00e7\u00e3o de dados tabulares (usado em alguns pipelines).</li> <li>python-dotenv: Carregamento de vari\u00e1veis de ambiente.</li> <li>drf-yasg: Gera\u00e7\u00e3o autom\u00e1tica de documenta\u00e7\u00e3o Swagger/OpenAPI.</li> <li>mkdocs, mkdocs-material, mkdocstrings: Gera\u00e7\u00e3o de documenta\u00e7\u00e3o est\u00e1tica do projeto.</li> </ul>"},{"location":"auxiliares/index.html#resumo","title":"Resumo","text":"<ul> <li>Django permite criar aplica\u00e7\u00f5es web e APIs REST de forma r\u00e1pida e segura.</li> <li>A ORM facilita o trabalho com bancos de dados sem SQL manual.</li> <li>O projeto integra processamento de dados eficiente (Polars/Pandas) e m\u00faltiplos bancos.</li> <li>Bibliotecas auxiliares garantem seguran\u00e7a, performance e documenta\u00e7\u00e3o de qualidade.</li> </ul> <p>Consulte os subdiret\u00f3rios para detalhes sobre tipos de dados, exemplos de uso e melhores pr\u00e1ticas.</p>"},{"location":"auxiliares/boas_praticas.html","title":"Boas Pr\u00e1ticas em Projetos Django Backend","text":""},{"location":"auxiliares/boas_praticas.html#estrutura-do-projeto","title":"Estrutura do Projeto","text":""},{"location":"auxiliares/boas_praticas.html#organizacao-de-apps","title":"Organiza\u00e7\u00e3o de Apps","text":"<pre><code>projeto/\n\u251c\u2500\u2500 app1/\n\u2502   \u251c\u2500\u2500 api/\n\u2502   \u2502   \u251c\u2500\u2500 views/\n\u2502   \u2502   \u251c\u2500\u2500 serializers/\n\u2502   \u2502   \u2514\u2500\u2500 urls.py\n\u2502   \u251c\u2500\u2500 models/\n\u2502   \u2514\u2500\u2500 tasks/\n\u2514\u2500\u2500 app2/\n\u2514\u2500\u2500 ...\n</code></pre>"},{"location":"auxiliares/boas_praticas.html#models","title":"Models","text":""},{"location":"auxiliares/boas_praticas.html#1-nomenclatura","title":"1. Nomenclatura","text":"<ul> <li>Use nomes em ingl\u00eas</li> <li>Classes em PascalCase</li> <li>Campos em snake_case</li> <li>Seja descritivo nos nomes</li> </ul> <pre><code># Bom\nclass CustomerOrder(models.Model):\norder_date = models.DateTimeField()\n# Ruim\nclass Pedido(models.Model):\ndt = models.DateTimeField()\n</code></pre>"},{"location":"auxiliares/boas_praticas.html#2-organizacao-de-campos","title":"2. Organiza\u00e7\u00e3o de Campos","text":"<ul> <li>Campos mais importantes primeiro</li> <li>Campos de auditoria por \u00faltimo</li> <li>Use coment\u00e1rios para campos complexos</li> </ul> <pre><code>class Order(models.Model):\n# Campos principais\nnumber = models.CharField(max_length=50)\ncustomer = models.ForeignKey('Customer', on_delete=models.PROTECT)\n# Campos de status\nstatus = models.CharField(max_length=20)\n# Campos de auditoria\ncreated_at = models.DateTimeField(auto_now_add=True)\nupdated_at = models.DateTimeField(auto_now=True)\n</code></pre>"},{"location":"auxiliares/boas_praticas.html#3-indices-e-performance","title":"3. \u00cdndices e Performance","text":"<ul> <li>Crie \u00edndices para campos frequentemente filtrados</li> <li>Use <code>db_index=True</code> com modera\u00e7\u00e3o</li> <li>Implemente <code>Meta.indexes</code> para \u00edndices compostos</li> </ul> <pre><code>class Meta:\nindexes = [\nmodels.Index(fields=['status', 'created_at']),\n]\n</code></pre>"},{"location":"auxiliares/boas_praticas.html#views","title":"Views","text":""},{"location":"auxiliares/boas_praticas.html#1-organizacao","title":"1. Organiza\u00e7\u00e3o","text":"<ul> <li>Separe views por funcionalidade</li> <li>Use ViewSets para CRUD padr\u00e3o</li> <li>Implemente views espec\u00edficas para casos especiais</li> </ul>"},{"location":"auxiliares/boas_praticas.html#2-performance","title":"2. Performance","text":"<ul> <li>Use <code>select_related()</code> e <code>prefetch_related()</code></li> <li>Implemente pagina\u00e7\u00e3o</li> <li>Cache quando apropriado</li> </ul> <pre><code>class OrderViewSet(viewsets.ModelViewSet):\nqueryset = Order.objects.select_related('customer')\npagination_class = CustomPagination\n</code></pre>"},{"location":"auxiliares/boas_praticas.html#3-seguranca","title":"3. Seguran\u00e7a","text":"<ul> <li>Sempre use decorators de permiss\u00e3o</li> <li>Valide dados de entrada</li> <li>Use rate limiting</li> </ul> <pre><code>from rest_framework.permissions import IsAuthenticated\n@permission_classes([IsAuthenticated])\ndef sensitive_view(request):\n# ...\n</code></pre>"},{"location":"auxiliares/boas_praticas.html#pipelines","title":"Pipelines","text":""},{"location":"auxiliares/boas_praticas.html#1-design","title":"1. Design","text":"<ul> <li>Siga o princ\u00edpio de responsabilidade \u00fanica</li> <li>Use context managers</li> <li>Implemente logs detalhados</li> </ul> <pre><code>class DataPipeline(Pipeline):\ndef __init__(self):\nsuper().__init__()\nself.logger = logging.getLogger(__name__)\ndef extract(self):\nself.logger.info(\"Iniciando extra\u00e7\u00e3o\")\n# ...\n</code></pre>"},{"location":"auxiliares/boas_praticas.html#2-tratamento-de-erros","title":"2. Tratamento de Erros","text":"<ul> <li>Use transa\u00e7\u00f5es at\u00f4micas</li> <li>Implemente rollback</li> <li>Mantenha logs de erro</li> </ul> <pre><code>@transaction.atomic\ndef process_data(self):\ntry:\n# processamento\nself.save()\nexcept Exception as e:\nself.logger.error(f\"Erro: {str(e)}\")\nraise\n</code></pre>"},{"location":"auxiliares/boas_praticas.html#configuracoes-do-projeto","title":"Configura\u00e7\u00f5es do Projeto","text":""},{"location":"auxiliares/boas_praticas.html#1-variaveis-de-ambiente","title":"1. Vari\u00e1veis de Ambiente","text":"<ul> <li>Use <code>.env</code> para configura\u00e7\u00f5es sens\u00edveis</li> <li>Mantenha um <code>.env.example</code> no reposit\u00f3rio</li> <li>Documente todas as vari\u00e1veis</li> </ul> <pre><code># settings.py\nSECRET_KEY = os.getenv('DJANGO_SECRET_KEY')\nDEBUG = os.getenv('DEBUG', 'False') == 'True'\n</code></pre>"},{"location":"auxiliares/boas_praticas.html#2-multiplos-ambientes","title":"2. M\u00faltiplos Ambientes","text":"<ul> <li>Separe settings por ambiente (dev, prod, test)</li> <li>Use arquivos de requirements espec\u00edficos</li> <li>Configure logging apropriadamente</li> </ul>"},{"location":"auxiliares/boas_praticas.html#migracoes","title":"Migra\u00e7\u00f5es","text":""},{"location":"auxiliares/boas_praticas.html#1-boas-praticas","title":"1. Boas Pr\u00e1ticas","text":"<ul> <li>Revise migra\u00e7\u00f5es antes de commit</li> <li>Mantenha migra\u00e7\u00f5es pequenas e at\u00f4micas</li> <li>Use <code>db_constraint=False</code> com cautela</li> </ul>"},{"location":"auxiliares/boas_praticas.html#2-operacoes-sensiveis","title":"2. Opera\u00e7\u00f5es Sens\u00edveis","text":"<ul> <li>Evite migra\u00e7\u00f5es que podem travar tabelas</li> <li>Planeje migra\u00e7\u00f5es de dados grandes</li> <li>Teste migra\u00e7\u00f5es em ambiente de desenvolvimento</li> </ul>"},{"location":"auxiliares/boas_praticas.html#links-uteis","title":"Links \u00dateis","text":""},{"location":"auxiliares/boas_praticas.html#django","title":"Django","text":"<ul> <li>Django Best Practices</li> <li>Django REST framework</li> <li>Django ORM Optimization</li> </ul>"},{"location":"auxiliares/boas_praticas.html#python","title":"Python","text":"<ul> <li>PEP 8 Style Guide</li> <li>Python Design Patterns</li> </ul>"},{"location":"auxiliares/boas_praticas.html#seguranca","title":"Seguran\u00e7a","text":"<ul> <li>Django Security</li> <li>OWASP Top 10</li> </ul>"},{"location":"auxiliares/boas_praticas.html#performance","title":"Performance","text":"<ul> <li>Django Database Performance</li> <li>REST Framework Throttling</li> </ul>"},{"location":"auxiliares/boas_praticas.html#ferramentas-recomendadas","title":"Ferramentas Recomendadas","text":""},{"location":"auxiliares/boas_praticas.html#desenvolvimento","title":"Desenvolvimento","text":"<ul> <li>Black: Formata\u00e7\u00e3o de c\u00f3digo</li> <li>Flake8: Linting</li> <li>isort: Organiza\u00e7\u00e3o de imports</li> <li>mypy: Verifica\u00e7\u00e3o de tipos</li> </ul>"},{"location":"auxiliares/boas_praticas.html#testes","title":"Testes","text":"<ul> <li>pytest: Framework de testes</li> <li>coverage: Cobertura de testes</li> <li>factory_boy: Factories para testes</li> </ul>"},{"location":"auxiliares/boas_praticas.html#documentacao","title":"Documenta\u00e7\u00e3o","text":"<ul> <li>mkdocs: Documenta\u00e7\u00e3o do projeto</li> <li>drf-yasg: Documenta\u00e7\u00e3o de API</li> </ul>"},{"location":"auxiliares/boas_praticas.html#checklist-de-revisao-de-codigo","title":"Checklist de Revis\u00e3o de C\u00f3digo","text":"<ul> <li>[ ] O c\u00f3digo segue PEP 8?</li> <li>[ ] As migra\u00e7\u00f5es foram testadas?</li> <li>[ ] H\u00e1 testes unit\u00e1rios?</li> <li>[ ] A documenta\u00e7\u00e3o foi atualizada?</li> <li>[ ] As queries est\u00e3o otimizadas?</li> <li>[ ] As permiss\u00f5es est\u00e3o configuradas?</li> <li>[ ] O c\u00f3digo est\u00e1 logando apropriadamente?</li> <li>[ ] As exce\u00e7\u00f5es s\u00e3o tratadas adequadamente?</li> </ul>"},{"location":"auxiliares/requirements.html","title":"Depend\u00eancias do Projeto (requirements.txt)","text":""},{"location":"auxiliares/requirements.html#django-e-django-rest-framework","title":"Django e Django REST Framework","text":""},{"location":"auxiliares/requirements.html#core","title":"Core","text":"<ul> <li>Django==4.2.10 </li> <li>Framework web principal</li> <li>Documenta\u00e7\u00e3o</li> </ul>"},{"location":"auxiliares/requirements.html#apis-e-extensoes","title":"APIs e Extens\u00f5es","text":"<ul> <li>djangorestframework==3.14.0</li> <li>Framework para APIs REST</li> <li>Documenta\u00e7\u00e3o</li> <li>django-cors-headers==4.3.1</li> <li>Gerenciamento de CORS para APIs</li> <li>django-filter==23.5</li> <li>Filtros avan\u00e7ados para APIs</li> <li>drf-yasg==1.21.7</li> <li>Documenta\u00e7\u00e3o autom\u00e1tica Swagger/OpenAPI</li> </ul>"},{"location":"auxiliares/requirements.html#autenticacao","title":"Autentica\u00e7\u00e3o","text":"<ul> <li>django-rest-knox==4.2.0</li> <li>Tokens de autentica\u00e7\u00e3o seguros</li> <li>djangorestframework-simplejwt==5.3.1</li> <li>Autentica\u00e7\u00e3o JWT</li> <li>PyJWT</li> <li>Manipula\u00e7\u00e3o de tokens JWT</li> </ul>"},{"location":"auxiliares/requirements.html#banco-de-dados","title":"Banco de Dados","text":""},{"location":"auxiliares/requirements.html#sql-server","title":"SQL Server","text":"<ul> <li>mssql-django==1.4</li> <li>Driver Django para SQL Server</li> <li>pyodbc</li> <li>Conex\u00e3o ODBC com SQL Server</li> </ul>"},{"location":"auxiliares/requirements.html#processamento-de-dados","title":"Processamento de Dados","text":""},{"location":"auxiliares/requirements.html#data-science","title":"Data Science","text":"<ul> <li>polars==1.29.0</li> <li>Framework de processamento de dados de alta performance</li> <li>Documenta\u00e7\u00e3o</li> <li>pandas==1.5.3</li> <li>An\u00e1lise e manipula\u00e7\u00e3o de dados</li> <li>Documenta\u00e7\u00e3o</li> </ul>"},{"location":"auxiliares/requirements.html#utilitarios","title":"Utilit\u00e1rios","text":""},{"location":"auxiliares/requirements.html#http-e-redes","title":"HTTP e Redes","text":"<ul> <li>requests==2.31.0</li> <li>Cliente HTTP para Python</li> <li>urllib3==2.2.0, certifi==2024.2.2, charset-normalizer==3.3.2, idna==3.6</li> <li>Depend\u00eancias para requests e networking</li> </ul>"},{"location":"auxiliares/requirements.html#configuracao","title":"Configura\u00e7\u00e3o","text":"<ul> <li>python-dotenv==1.0.1</li> <li>Carregamento de vari\u00e1veis de ambiente</li> </ul>"},{"location":"auxiliares/requirements.html#documentacao","title":"Documenta\u00e7\u00e3o","text":""},{"location":"auxiliares/requirements.html#mkdocs","title":"MkDocs","text":"<ul> <li>mkdocs==1.5.3</li> <li>Gera\u00e7\u00e3o de documenta\u00e7\u00e3o est\u00e1tica</li> <li>Documenta\u00e7\u00e3o</li> <li>mkdocs-material==9.5.12</li> <li>Tema Material Design para MkDocs</li> <li>Documenta\u00e7\u00e3o</li> <li>mkdocstrings==0.24.0, mkdocstrings-python==1.7.5</li> <li>Gera\u00e7\u00e3o autom\u00e1tica de documenta\u00e7\u00e3o a partir de docstrings</li> </ul>"},{"location":"auxiliares/requirements.html#instalacao","title":"Instala\u00e7\u00e3o","text":"<pre><code># Criar ambiente virtual\npython -m venv venv\n\n# Ativar ambiente\nsource venv/bin/activate  # Linux/Mac\n.\\venv\\Scripts\\activate  # Windows\n# Instalar depend\u00eancias\npip install -r requirements.txt\n</code></pre>"},{"location":"auxiliares/requirements.html#atualizando-dependencias","title":"Atualizando Depend\u00eancias","text":"<p>Para atualizar uma depend\u00eancia espec\u00edfica: <pre><code>pip install --upgrade nome-pacote\npip freeze &gt; requirements.txt\n</code></pre></p>"},{"location":"auxiliares/requirements.html#boas-praticas","title":"Boas Pr\u00e1ticas","text":"<ol> <li>Vers\u00f5es Fixas</li> <li>Use vers\u00f5es espec\u00edficas (==) para reprodutibilidade</li> <li> <p>Evite ranges de vers\u00e3o (~= ou &gt;=) em produ\u00e7\u00e3o</p> </li> <li> <p>Organiza\u00e7\u00e3o</p> </li> <li>Mantenha depend\u00eancias agrupadas por fun\u00e7\u00e3o</li> <li> <p>Documente o prop\u00f3sito de cada depend\u00eancia</p> </li> <li> <p>Seguran\u00e7a</p> </li> <li>Atualize regularmente para vers\u00f5es de seguran\u00e7a</li> <li>Use ferramentas como <code>safety</code> para verificar vulnerabilidades ```</li> </ol>"},{"location":"auxiliares/conceitos/index.html","title":"Conceitos Fundamentais do Django","text":"<p>Este guia fornece uma explica\u00e7\u00e3o detalhada dos principais conceitos do Django utilizados neste projeto.</p>"},{"location":"auxiliares/conceitos/index.html#estrutura-da-documentacao","title":"Estrutura da Documenta\u00e7\u00e3o","text":"<ul> <li>Models: Representa\u00e7\u00e3o das tabelas do banco de dados em Python</li> <li>Views: Processamento de requisi\u00e7\u00f5es e respostas HTTP</li> <li>Pipelines: Processamento de dados e ETL</li> </ul>"},{"location":"auxiliares/conceitos/index.html#navegacao-rapida","title":"Navega\u00e7\u00e3o R\u00e1pida","text":"<ol> <li>Models</li> <li>Estrutura de dados</li> <li>ORM</li> <li>Relacionamentos</li> <li> <p>Consultas</p> </li> <li> <p>Views</p> </li> <li>Endpoints API</li> <li>Processamento de requisi\u00e7\u00f5es</li> <li>Serializa\u00e7\u00e3o</li> <li> <p>Autentica\u00e7\u00e3o</p> </li> <li> <p>Pipelines</p> </li> <li>ETL</li> <li>Processamento em lote</li> <li>Logs</li> <li>Transforma\u00e7\u00e3o de dados</li> </ol> <p>Cada se\u00e7\u00e3o cont\u00e9m exemplos pr\u00e1ticos e paralelos com SQL Server para facilitar o entendimento.</p>"},{"location":"auxiliares/conceitos/admin.html","title":"Django Admin","text":""},{"location":"auxiliares/conceitos/admin.html#o-que-e-o-admin","title":"O que \u00e9 o Admin?","text":"<p>O Django Admin \u00e9 uma interface administrativa autom\u00e1tica que permite gerenciar os dados do seu modelo atrav\u00e9s de uma interface web.</p>"},{"location":"auxiliares/conceitos/admin.html#configuracao-basica","title":"Configura\u00e7\u00e3o B\u00e1sica","text":"<pre><code>from django.contrib import admin\n@admin.register(Produto)\nclass ProdutoAdmin(admin.ModelAdmin):\nlist_display = ['nome', 'preco', 'estoque']\nlist_filter = ['categoria']\nsearch_fields = ['nome']\nordering = ['-criado_em']\n</code></pre>"},{"location":"auxiliares/conceitos/admin.html#customizacao","title":"Customiza\u00e7\u00e3o","text":"<pre><code>class PedidoAdmin(admin.ModelAdmin):\ndef get_queryset(self, request):\nqs = super().get_queryset(request)\nif request.user.is_superuser:\nreturn qs\nreturn qs.filter(vendedor=request.user)\n</code></pre>"},{"location":"auxiliares/conceitos/migrations.html","title":"Django Migrations","text":""},{"location":"auxiliares/conceitos/migrations.html#o-que-sao-migrations","title":"O que s\u00e3o Migrations?","text":"<p>Migrations s\u00e3o o sistema do Django para propagar mudan\u00e7as feitas nos models para o esquema do banco de dados.</p>"},{"location":"auxiliares/conceitos/migrations.html#comandos-basicos","title":"Comandos B\u00e1sicos","text":"<pre><code># Criar migrations\npython manage.py makemigrations\n\n# Aplicar migrations\npython manage.py migrate\n\n# Listar migrations\npython manage.py showmigrations\n</code></pre>"},{"location":"auxiliares/conceitos/migrations.html#migration-manual","title":"Migration Manual","text":"<pre><code>from django.db import migrations, models\nclass Migration(migrations.Migration):\ndependencies = [\n('app', '0001_initial'),\n]\noperations = [\nmigrations.AddField(\nmodel_name='produto',\nname='preco',\nfield=models.DecimalField(max_digits=10, decimal_places=2),\n),\n]\n</code></pre>"},{"location":"auxiliares/conceitos/models.html","title":"Django Models: Documenta\u00e7\u00e3o Detalhada","text":""},{"location":"auxiliares/conceitos/models.html#o-que-sao-models","title":"O que s\u00e3o Models?","text":"<p>Models s\u00e3o a representa\u00e7\u00e3o das tabelas do banco de dados em c\u00f3digo Python. Eles s\u00e3o a fonte \u00fanica de informa\u00e7\u00e3o sobre seus dados e cont\u00eam os campos e comportamentos essenciais dos dados armazenados.</p>"},{"location":"auxiliares/conceitos/models.html#paralelo-com-sql-server","title":"Paralelo com SQL Server","text":"Django Model SQL Server Classe Model Tabela Atributo de classe Coluna Inst\u00e2ncia de Model Linha/Registro Manager (objects) Stored Procedures QuerySet Resultado de SELECT"},{"location":"auxiliares/conceitos/models.html#estrutura-basica","title":"Estrutura B\u00e1sica","text":"<pre><code>from django.db import models\nclass Cliente(models.Model):\nnome = models.CharField(max_length=100)\nemail = models.EmailField(unique=True)\ncriado_em = models.DateTimeField(auto_now_add=True)\nclass Meta:\ndb_table = 'clientes'\nordering = ['-criado_em']\n</code></pre> <p>SQL Server equivalente: <pre><code>CREATE TABLE clientes (\nid INT IDENTITY(1,1) PRIMARY KEY,\nnome NVARCHAR(100) NOT NULL,\nemail NVARCHAR(254) UNIQUE NOT NULL,\ncriado_em DATETIME DEFAULT GETDATE()\n)\n</code></pre></p>"},{"location":"auxiliares/conceitos/models.html#tipos-de-dados-e-comparacoes-com-sql-server","title":"Tipos de Dados e Compara\u00e7\u00f5es com SQL Server","text":""},{"location":"auxiliares/conceitos/models.html#campos-de-texto","title":"Campos de Texto","text":"Django SQL Server Descri\u00e7\u00e3o CharField VARCHAR/NVARCHAR Texto com tamanho m\u00e1ximo TextField TEXT/NTEXT Texto sem limite de tamanho EmailField VARCHAR + valida\u00e7\u00e3o Email com valida\u00e7\u00e3o URLField VARCHAR + valida\u00e7\u00e3o URL com valida\u00e7\u00e3o"},{"location":"auxiliares/conceitos/models.html#campos-numericos","title":"Campos Num\u00e9ricos","text":"Django SQL Server Descri\u00e7\u00e3o IntegerField INT N\u00fameros inteiros BigIntegerField BIGINT Inteiros grandes DecimalField DECIMAL N\u00fameros decimais precisos FloatField FLOAT N\u00fameros decimais"},{"location":"auxiliares/conceitos/models.html#campos-de-datahora","title":"Campos de Data/Hora","text":"Django SQL Server Descri\u00e7\u00e3o DateField DATE Apenas data TimeField TIME Apenas hora DateTimeField DATETIME Data e hora"},{"location":"auxiliares/conceitos/models.html#exemplos-praticos","title":"Exemplos Pr\u00e1ticos","text":""},{"location":"auxiliares/conceitos/models.html#1-model-com-diferentes-tipos-de-campos","title":"1. Model com Diferentes Tipos de Campos","text":"<pre><code>from django.db import models\nclass Produto(models.Model):\n# Campos de texto\nnome = models.CharField(max_length=100)\ndescricao = models.TextField()\nsku = models.CharField(max_length=20, unique=True)\n# Campos num\u00e9ricos\npreco = models.DecimalField(max_digits=10, decimal_places=2)\nestoque = models.IntegerField(default=0)\npeso = models.FloatField(null=True, blank=True)\n# Campos de data/hora\ncriado_em = models.DateTimeField(auto_now_add=True)\natualizado_em = models.DateTimeField(auto_now=True)\ndata_validade = models.DateField(null=True)\n# Campos booleanos e escolhas\nativo = models.BooleanField(default=True)\ncategoria = models.CharField(\nmax_length=20,\nchoices=[\n('ALIMENTO', 'Alimento'),\n('BEBIDA', 'Bebida'),\n('LIMPEZA', 'Limpeza')\n]\n)\nclass Meta:\ndb_table = 'produtos'\nindexes = [\nmodels.Index(fields=['nome']),\nmodels.Index(fields=['sku']),\n]\n</code></pre> <p>SQL Server equivalente: <pre><code>CREATE TABLE produtos (\nid INT IDENTITY(1,1) PRIMARY KEY,\nnome NVARCHAR(100) NOT NULL,\ndescricao NTEXT,\nsku NVARCHAR(20) UNIQUE NOT NULL,\npreco DECIMAL(10,2) NOT NULL,\nestoque INT DEFAULT 0 NOT NULL,\npeso FLOAT NULL,\ncriado_em DATETIME DEFAULT GETDATE() NOT NULL,\natualizado_em DATETIME NOT NULL,\ndata_validade DATE NULL,\nativo BIT DEFAULT 1 NOT NULL,\ncategoria NVARCHAR(20) CHECK (categoria IN ('ALIMENTO', 'BEBIDA', 'LIMPEZA')) NOT NULL\n);\nCREATE INDEX IX_produtos_nome ON produtos(nome);\nCREATE INDEX IX_produtos_sku ON produtos(sku);\n</code></pre></p>"},{"location":"auxiliares/conceitos/models.html#2-relacionamentos","title":"2. Relacionamentos","text":""},{"location":"auxiliares/conceitos/models.html#one-to-many-1n","title":"One-to-Many (1:N)","text":"<pre><code>class Pedido(models.Model):\ncliente = models.ForeignKey(\n'Cliente',\non_delete=models.CASCADE,\nrelated_name='pedidos'\n)\n# ...outros campos\n</code></pre> <p>SQL Server: <pre><code>CREATE TABLE pedidos (\nid INT IDENTITY(1,1) PRIMARY KEY,\ncliente_id INT NOT NULL,\n-- ...outros campos\nFOREIGN KEY (cliente_id) REFERENCES clientes(id)\n);\n</code></pre></p>"},{"location":"auxiliares/conceitos/models.html#many-to-many-nn","title":"Many-to-Many (N:N)","text":"<pre><code>class Produto(models.Model):\ncategorias = models.ManyToManyField('Categoria', through='ProdutoCategoria')\nclass ProdutoCategoria(models.Model):\nproduto = models.ForeignKey(Produto, on_delete=models.CASCADE)\ncategoria = models.ForeignKey('Categoria', on_delete=models.CASCADE)\ndata_adicao = models.DateTimeField(auto_now_add=True)\n</code></pre> <p>SQL Server: <pre><code>CREATE TABLE produto_categoria (\nproduto_id INT,\ncategoria_id INT,\ndata_adicao DATETIME DEFAULT GETDATE(),\nPRIMARY KEY (produto_id, categoria_id),\nFOREIGN KEY (produto_id) REFERENCES produtos(id),\nFOREIGN KEY (categoria_id) REFERENCES categorias(id)\n);\n</code></pre></p>"},{"location":"auxiliares/conceitos/models.html#operacoes-comuns","title":"Opera\u00e7\u00f5es Comuns","text":""},{"location":"auxiliares/conceitos/models.html#insercao","title":"Inser\u00e7\u00e3o","text":"<pre><code># Django\nproduto = Produto.objects.create(\nnome=\"Refrigerante\",\npreco=5.99,\ncategoria=\"BEBIDA\"\n)\n# SQL Server\nINSERT INTO produtos (nome, preco, categoria)\nVALUES ('Refrigerante', 5.99, 'BEBIDA');\n</code></pre>"},{"location":"auxiliares/conceitos/models.html#consultas","title":"Consultas","text":"<pre><code># Django - Filtros b\u00e1sicos\nprodutos = Produto.objects.filter(\npreco__lt=10.00,\ncategoria=\"BEBIDA\",\nativo=True\n)\n# SQL Server\nSELECT * FROM produtos\nWHERE preco &lt; 10.00\nAND categoria = 'BEBIDA'\nAND ativo = 1;\n# Django - Joins\npedidos = Pedido.objects.select_related('cliente').filter(\ncliente__cidade=\"S\u00e3o Paulo\"\n)\n# SQL Server\nSELECT p.* FROM pedidos p\nINNER JOIN clientes c ON p.cliente_id = c.id\nWHERE c.cidade = 'S\u00e3o Paulo';\n</code></pre>"},{"location":"auxiliares/conceitos/models.html#boas-praticas-e-dicas","title":"Boas Pr\u00e1ticas e Dicas","text":"<ol> <li> <p>Valida\u00e7\u00e3o de Campos <pre><code>class Produto(models.Model):\ndef clean(self):\nif self.preco &lt; 0:\nraise ValidationError(\"Pre\u00e7o n\u00e3o pode ser negativo\")\n</code></pre></p> </li> <li> <p>\u00cdndices Corretos <pre><code>class Meta:\nindexes = [\nmodels.Index(fields=['nome']),\nmodels.Index(fields=['criado_em', 'categoria']),\n]\n</code></pre></p> </li> <li> <p>Campos Calculados <pre><code>from django.db.models import F\nclass Pedido(models.Model):\n@property\ndef total_com_desconto(self):\nreturn F('total') - F('desconto')\n</code></pre></p> </li> <li> <p>Managers Customizados <pre><code>class AtivoManager(models.Manager):\ndef get_queryset(self):\nreturn super().get_queryset().filter(ativo=True)\nclass Produto(models.Model):\nobjects = models.Manager()\nativos = AtivoManager()\n</code></pre></p> </li> <li> <p>Sinais para Automatiza\u00e7\u00e3o <pre><code>@receiver(post_save, sender=Pedido)\ndef atualiza_estoque(sender, instance, created, **kwargs):\nif created:\ninstance.produto.reduzir_estoque(instance.quantidade)\n</code></pre></p> </li> </ol>"},{"location":"auxiliares/conceitos/models.html#performance-e-otimizacao","title":"Performance e Otimiza\u00e7\u00e3o","text":"<ol> <li> <p>Select Related para FKs <pre><code># Bom - Uma query\npedidos = Pedido.objects.select_related('cliente').all()\n# Ruim - N+1 queries\npedidos = Pedido.objects.all()\nfor pedido in pedidos:\nprint(pedido.cliente.nome)  # Nova query para cada pedido\n</code></pre></p> </li> <li> <p>Prefetch Related para M2M <pre><code>produtos = Produto.objects.prefetch_related('categorias').all()\n</code></pre></p> </li> <li> <p>Bulk Operations <pre><code># Criar m\u00faltiplos\nProduto.objects.bulk_create([\nProduto(nome=\"Item 1\"),\nProduto(nome=\"Item 2\"),\n])\n# Atualizar m\u00faltiplos\nProduto.objects.filter(categoria=\"BEBIDA\").update(preco=F('preco') * 1.1)\n</code></pre></p> </li> </ol>"},{"location":"auxiliares/conceitos/models.html#recursos-avancados","title":"Recursos Avan\u00e7ados","text":"<ol> <li> <p>Constraints <pre><code>class Meta:\nconstraints = [\nmodels.CheckConstraint(\ncheck=models.Q(idade__gte=18),\nname='idade_maior_18'\n),\nmodels.UniqueConstraint(\nfields=['cpf'],\nname='cpf_unico'\n)\n]\n</code></pre></p> </li> <li> <p>Heran\u00e7a de Models <pre><code>class Pessoa(models.Model):\nnome = models.CharField(max_length=100)\nclass Cliente(Pessoa):\ncodigo = models.CharField(max_length=20)\n</code></pre></p> </li> </ol> <p>Consulte a documenta\u00e7\u00e3o espec\u00edfica de cada app para ver exemplos pr\u00e1ticos de implementa\u00e7\u00e3o no projeto.</p>"},{"location":"auxiliares/conceitos/pipelines.html","title":"Django Pipelines","text":""},{"location":"auxiliares/conceitos/pipelines.html#o-que-sao-pipelines","title":"O que s\u00e3o Pipelines?","text":"<p>Pipelines no Django s\u00e3o uma s\u00e9rie de opera\u00e7\u00f5es sequenciais que processam dados de forma estruturada. S\u00e3o comumente usados para: - ETL (Extract, Transform, Load) - Processamento em lote - Transforma\u00e7\u00e3o de dados - Sincroniza\u00e7\u00e3o entre sistemas</p>"},{"location":"auxiliares/conceitos/pipelines.html#estrutura-basica","title":"Estrutura B\u00e1sica","text":"<pre><code>from django.db import transaction\nclass BasePipeline:\ndef __init__(self):\nself.log = {\n'started_at': None,\n'finished_at': None,\n'n_processed': 0,\n'n_errors': 0\n}\ndef extract(self):\n\"\"\"Extrai dados da fonte\"\"\"\nraise NotImplementedError\ndef transform(self):\n\"\"\"Transforma os dados\"\"\"\nraise NotImplementedError\ndef load(self):\n\"\"\"Carrega dados no destino\"\"\"\nraise NotImplementedError\n@transaction.atomic\ndef run(self):\n\"\"\"Executa o pipeline\"\"\"\ntry:\nself.extract()\nself.transform()\nself.load()\nreturn self.log\nexcept Exception as e:\nself.log['error'] = str(e)\nraise\n</code></pre>"},{"location":"auxiliares/conceitos/pipelines.html#exemplos-praticos","title":"Exemplos Pr\u00e1ticos","text":""},{"location":"auxiliares/conceitos/pipelines.html#pipeline-de-analise","title":"Pipeline de An\u00e1lise","text":"<pre><code>from django.db.models import Count, Avg, Sum, F\nclass AnalyticsPipeline(BasePipeline):\ndef run(self):\nreturn Pedido.objects.values('produto__categoria').annotate(\ntotal_vendas=Count('id'),\nvalor_medio=Avg('total'),\nlucro=Sum(F('total') - F('custo'))\n).order_by('-total_vendas')\n</code></pre>"},{"location":"auxiliares/conceitos/pipelines.html#pipeline-de-etl","title":"Pipeline de ETL","text":"<pre><code>class ETLPipeline(BasePipeline):\ndef extract(self):\nself.dados = FonteExterna.objects.filter(\nprocessado=False\n).values()\ndef transform(self):\nself.transformed = []\nfor dado in self.dados:\nself.transformed.append({\n'id': dado['id_externo'],\n'valor': float(dado['valor']) * 1.1,\n'data': dado['data'].date()\n})\n@transaction.atomic\ndef load(self):\nfor item in self.transformed:\nDestino.objects.create(**item)\nself.log['n_processed'] += 1\n</code></pre>"},{"location":"auxiliares/conceitos/pipelines.html#boas-praticas","title":"Boas Pr\u00e1ticas","text":"<ol> <li> <p>Atomicidade <pre><code>@transaction.atomic\ndef load(self):\n\"\"\"Garante que todas as opera\u00e7\u00f5es sejam at\u00f4micas\"\"\"\n# ...existing code...\n</code></pre></p> </li> <li> <p>Logging <pre><code>def run(self):\nself.log['started_at'] = timezone.now()\ntry:\n# ...existing code...\nfinally:\nself.log['finished_at'] = timezone.now()\n</code></pre></p> </li> <li> <p>Processamento em Lotes <pre><code>def load(self):\nDestino.objects.bulk_create(\nself.transformed,\nbatch_size=1000\n)\n</code></pre></p> </li> </ol>"},{"location":"auxiliares/conceitos/pipelines.html#implementacao-no-projeto","title":"Implementa\u00e7\u00e3o no Projeto","text":"<p>Para implementa\u00e7\u00f5es espec\u00edficas, consulte: - <code>app.utils.pipeline</code> para a classe base - <code>dw_analytics.pipelines</code> para pipelines de an\u00e1lise - <code>power_bi.tasks</code> para pipelines de integra\u00e7\u00e3o</p>"},{"location":"auxiliares/conceitos/pipelines.html#dicas-de-performance","title":"Dicas de Performance","text":"<ol> <li>Utilize <code>select_related()</code> e <code>prefetch_related()</code> para queries otimizadas</li> <li>Implemente processamento em lotes para grandes volumes</li> <li>Use cache para resultados frequentemente acessados</li> <li>Considere async/await para opera\u00e7\u00f5es I/O bound</li> </ol>"},{"location":"auxiliares/conceitos/pipelines.html#monitoramento","title":"Monitoramento","text":"<p><pre><code>class MonitoredPipeline(BasePipeline):\ndef __init__(self):\nsuper().__init__()\nself.start_time = None\ndef run(self):\nself.start_time = timezone.now()\ntry:\nreturn super().run()\nfinally:\nself.log.update({\n'duration': (timezone.now() - self.start_time).total_seconds(),\n'memory_usage': resource.getrusage(resource.RUSAGE_SELF).ru_maxrss\n})\n</code></pre> <pre><code>## Monitoramento e Logs\n\n### Exemplo de Log\n```python\n{\n    'n_inserted': 1500,\n    'n_deleted': 100,\n    'started_at': '2024-02-20 10:00:00',\n    'finished_at': '2024-02-20 10:05:00',\n    'duration': 300.0  # segundos\n}\n</code></pre></p>"},{"location":"auxiliares/conceitos/pipelines.html#comparacao-com-sql-server","title":"Compara\u00e7\u00e3o com SQL Server","text":"<ul> <li>Logs Django: Dicion\u00e1rio Python</li> <li>SQL Server: Tabela sys.dm_exec_requests</li> </ul>"},{"location":"auxiliares/conceitos/pipelines.html#casos-de-uso","title":"Casos de Uso","text":"<ol> <li>Carga Peri\u00f3dica</li> <li>Importa\u00e7\u00e3o noturna</li> <li>Atualiza\u00e7\u00e3o de m\u00e9tricas</li> <li> <p>Gera\u00e7\u00e3o de relat\u00f3rios</p> </li> <li> <p>Processamento Sob Demanda</p> </li> <li>Exporta\u00e7\u00f5es grandes</li> <li>Rec\u00e1lculo de dados</li> <li> <p>Corre\u00e7\u00f5es em lote</p> </li> <li> <p>Integra\u00e7\u00e3o entre Sistemas</p> </li> <li>Sincroniza\u00e7\u00e3o de bases</li> <li>Migra\u00e7\u00e3o de dados</li> <li>Consolida\u00e7\u00e3o de fontes</li> </ol>"},{"location":"auxiliares/conceitos/pipelines.html#dicas-de-performance_1","title":"Dicas de Performance","text":"<ol> <li> <p>Processamento em Lotes <pre><code>def load(self):\n# Bulk create - mais eficiente\nDestino.objects.bulk_create(\nself.transformed_data,\nbatch_size=1000\n)\n</code></pre></p> </li> <li> <p>Otimiza\u00e7\u00e3o de Mem\u00f3ria <pre><code>def extract(self):\n# Processa em chunks para grandes volumes\nfor chunk in pd.read_csv('big_file.csv', chunksize=10000):\nself._process_chunk(chunk)\n</code></pre></p> </li> <li> <p>Paraleliza\u00e7\u00e3o <pre><code>from concurrent.futures import ThreadPoolExecutor\ndef transform(self):\nwith ThreadPoolExecutor() as executor:\n# Processa m\u00faltiplos chunks em paralelo\nfutures = [executor.submit(self._transform_chunk, chunk)\nfor chunk in self.chunks]\n</code></pre></p> </li> </ol>"},{"location":"auxiliares/conceitos/pipelines.html#consideracoes-finais","title":"Considera\u00e7\u00f5es Finais","text":"<ul> <li>Pipelines s\u00e3o essenciais para processamento em lote</li> <li>Combine com Celery para execu\u00e7\u00e3o ass\u00edncrona</li> <li>Mantenha logs detalhados para debug</li> <li>Use transa\u00e7\u00f5es para garantir consist\u00eancia</li> <li>Otimize para grandes volumes de dados</li> </ul> <p>Consulte o c\u00f3digo fonte de <code>app.utils.pipeline</code> para mais detalhes de implementa\u00e7\u00e3o.</p>"},{"location":"auxiliares/conceitos/serializers.html","title":"Django REST Framework Serializers","text":""},{"location":"auxiliares/conceitos/serializers.html#o-que-sao-serializers","title":"O que s\u00e3o Serializers?","text":"<p>Serializers permitem que dados complexos como QuerySets e inst\u00e2ncias de modelo sejam convertidos em tipos de dados nativos do Python que podem ser facilmente renderizados em JSON, XML ou outros formatos.</p>"},{"location":"auxiliares/conceitos/serializers.html#estrutura-basica","title":"Estrutura B\u00e1sica","text":"<pre><code>from rest_framework import serializers\nclass ClienteSerializer(serializers.ModelSerializer):\nclass Meta:\nmodel = Cliente\nfields = ['id', 'nome', 'email', 'criado_em']\n</code></pre>"},{"location":"auxiliares/conceitos/serializers.html#tipos-de-serializers","title":"Tipos de Serializers","text":"<ol> <li> <p>ModelSerializer <pre><code>class ProdutoSerializer(serializers.ModelSerializer):\nclass Meta:\nmodel = Produto\nfields = '__all__'\n</code></pre></p> </li> <li> <p>Serializer Regular <pre><code>class LoginSerializer(serializers.Serializer):\nemail = serializers.EmailField()\npassword = serializers.CharField(write_only=True)\n</code></pre></p> </li> </ol>"},{"location":"auxiliares/conceitos/serializers.html#validacao","title":"Valida\u00e7\u00e3o","text":"<pre><code>def validate_preco(self, value):\nif value &lt; 0:\nraise serializers.ValidationError(\"Pre\u00e7o n\u00e3o pode ser negativo\")\nreturn value\ndef validate(self, data):\nif data['preco'] &gt; data['preco_maximo']:\nraise serializers.ValidationError(\"Pre\u00e7o excede o m\u00e1ximo\")\nreturn data\n</code></pre>"},{"location":"auxiliares/conceitos/serializers.html#relacionamentos","title":"Relacionamentos","text":"<pre><code>class PedidoSerializer(serializers.ModelSerializer):\ncliente = ClienteSerializer(read_only=True)\nprodutos = ProdutoSerializer(many=True, read_only=True)\nclass Meta:\nmodel = Pedido\nfields = ['id', 'cliente', 'produtos', 'total']\n</code></pre>"},{"location":"auxiliares/conceitos/tests.html","title":"Django Tests","text":""},{"location":"auxiliares/conceitos/tests.html#o-que-sao-tests","title":"O que s\u00e3o Tests?","text":"<p>Testes s\u00e3o fundamentais para garantir que seu c\u00f3digo funcione como esperado e continue funcionando ap\u00f3s mudan\u00e7as.</p>"},{"location":"auxiliares/conceitos/tests.html#tipos-de-testes","title":"Tipos de Testes","text":"<ol> <li> <p>Unit Tests <pre><code>from django.test import TestCase\nclass ProdutoTestCase(TestCase):\ndef setUp(self):\nself.produto = Produto.objects.create(\nnome=\"Test\",\npreco=10.00\n)\ndef test_produto_criacao(self):\nself.assertEqual(self.produto.nome, \"Test\")\n</code></pre></p> </li> <li> <p>API Tests <pre><code>from rest_framework.test import APITestCase\nclass ProdutoAPITestCase(APITestCase):\ndef test_lista_produtos(self):\nresponse = self.client.get('/api/produtos/')\nself.assertEqual(response.status_code, 200)\n</code></pre></p> </li> </ol>"},{"location":"auxiliares/conceitos/views.html","title":"Django Views e ViewSets","text":""},{"location":"auxiliares/conceitos/views.html#o-que-sao-views","title":"O que s\u00e3o Views?","text":"<p>Views s\u00e3o fun\u00e7\u00f5es ou classes Python que processam requisi\u00e7\u00f5es HTTP e retornam respostas. No DRF, ViewSets fornecem uma abstra\u00e7\u00e3o para opera\u00e7\u00f5es CRUD comuns.</p>"},{"location":"auxiliares/conceitos/views.html#tipos-de-views","title":"Tipos de Views","text":"<ol> <li> <p>ViewSets <pre><code>from rest_framework import viewsets\nclass ProdutoViewSet(viewsets.ModelViewSet):\nqueryset = Produto.objects.all()\nserializer_class = ProdutoSerializer\npermission_classes = [IsAuthenticated]\n</code></pre></p> </li> <li> <p>APIView <pre><code>from rest_framework.views import APIView\nclass PedidoView(APIView):\ndef get(self, request):\npedidos = Pedido.objects.all()\nreturn Response(PedidoSerializer(pedidos, many=True).data)\n</code></pre></p> </li> </ol>"},{"location":"auxiliares/conceitos/views.html#filtros-e-paginacao","title":"Filtros e Pagina\u00e7\u00e3o","text":"<p><pre><code>from rest_framework import filters\nclass ProdutoViewSet(viewsets.ModelViewSet):\nqueryset = Produto.objects.all()\nserializer_class = ProdutoSerializer\nfilter_backends = [filters.SearchFilter]\nsearch_fields = ['nome', 'categoria']\npagination_class = StandardResultsSetPagination\n</code></pre> <pre><code>from rest_framework.views import APIView\nfrom rest_framework.response import Response\nclass ClienteView(APIView):\n# GET - Listar\ndef get(self, request):\nclientes = Cliente.objects.all()\nreturn Response(ClienteSerializer(clientes, many=True).data)\n# POST - Criar\ndef post(self, request):\nserializer = ClienteSerializer(data=request.data)\nif serializer.is_valid():\nserializer.save()\nreturn Response(serializer.data, status=201)\nreturn Response(serializer.errors, status=400)\n# PATCH - Atualizar parcial\ndef patch(self, request, pk):\ncliente = Cliente.objects.get(pk=pk)\nserializer = ClienteSerializer(cliente, data=request.data, partial=True)\nif serializer.is_valid():\nserializer.save()\nreturn Response(serializer.data)\nreturn Response(serializer.errors, status=400)\n# DELETE - Remover\ndef delete(self, request, pk):\ncliente = Cliente.objects.get(pk=pk)\ncliente.delete()\nreturn Response(status=204)\n</code></pre></p>"},{"location":"auxiliares/conceitos/views.html#3-viewsets-mais-comum-em-apis-rest","title":"3. ViewSets (Mais comum em APIs REST)","text":"<pre><code>from rest_framework import viewsets, filters\nfrom rest_framework.decorators import action\nfrom django_filters.rest_framework import DjangoFilterBackend\nclass ClienteViewSet(viewsets.ModelViewSet):\nqueryset = Cliente.objects.all()\nserializer_class = ClienteSerializer\n# Configura\u00e7\u00f5es adicionais\nfilter_backends = [DjangoFilterBackend, filters.SearchFilter]\nfilterset_fields = ['cidade', 'status']\nsearch_fields = ['nome', 'email']\n# Endpoint customizado\n@action(detail=True, methods=['post'])\ndef desativar(self, request, pk=None):\ncliente = self.get_object()\ncliente.ativo = False\ncliente.save()\nreturn Response({'status': 'cliente desativado'})\n# Override de m\u00e9todo padr\u00e3o\ndef perform_create(self, serializer):\nserializer.save(criado_por=self.request.user)\n</code></pre>"},{"location":"auxiliares/conceitos/views.html#exemplos-de-uso-pratico","title":"Exemplos de Uso Pr\u00e1tico","text":""},{"location":"auxiliares/conceitos/views.html#1-view-com-filtros-e-paginacao","title":"1. View com Filtros e Pagina\u00e7\u00e3o","text":"<pre><code>from app.utils.paginators import CustomPagination\nclass PedidoViewSet(viewsets.ModelViewSet):\nqueryset = Pedido.objects.all()\nserializer_class = PedidoSerializer\npagination_class = CustomPagination\ndef get_queryset(self):\n# Filtros din\u00e2micos\nqueryset = Pedido.objects.all()\nstatus = self.request.query_params.get('status', None)\nif status:\nqueryset = queryset.filter(status=status)\nreturn queryset\n</code></pre>"},{"location":"auxiliares/conceitos/views.html#2-view-com-agregacoes","title":"2. View com Agrega\u00e7\u00f5es","text":"<pre><code>class RelatorioVendas(APIView):\ndef get(self, request):\n# Equivalente a GROUP BY em SQL\nvendas = Pedido.objects.values('status').annotate(\ntotal=Sum('valor'),\nquantidade=Count('id')\n)\nreturn Response(vendas)\n</code></pre>"},{"location":"auxiliares/conceitos/views.html#3-view-com-multiplos-serializers","title":"3. View com M\u00faltiplos Serializers","text":"<pre><code>class ClienteViewSet(viewsets.ModelViewSet):\nqueryset = Cliente.objects.all()\ndef get_serializer_class(self):\nif self.action == 'list':\nreturn ClienteListSerializer\nreturn ClienteDetailSerializer\n</code></pre>"},{"location":"auxiliares/conceitos/views.html#autenticacao-e-permissoes","title":"Autentica\u00e7\u00e3o e Permiss\u00f5es","text":"<pre><code>from rest_framework.permissions import IsAuthenticated\nfrom rest_framework.authentication import TokenAuthentication\nclass PedidoProtegido(APIView):\nauthentication_classes = [TokenAuthentication]\npermission_classes = [IsAuthenticated]\ndef get(self, request):\n# S\u00f3 usu\u00e1rios autenticados chegam aqui\nreturn Response({\"message\": \"autorizado\"})\n</code></pre>"},{"location":"auxiliares/conceitos/views.html#tratamento-de-erros","title":"Tratamento de Erros","text":"<pre><code>from rest_framework.exceptions import NotFound\nclass ClienteDetalhe(APIView):\ndef get(self, request, pk):\ntry:\ncliente = Cliente.objects.get(pk=pk)\nreturn Response(ClienteSerializer(cliente).data)\nexcept Cliente.DoesNotExist:\nraise NotFound(\"Cliente n\u00e3o encontrado\")\n</code></pre>"},{"location":"auxiliares/conceitos/views.html#integracao-com-sql-server","title":"Integra\u00e7\u00e3o com SQL Server","text":""},{"location":"auxiliares/conceitos/views.html#view-com-raw-query","title":"View com Raw Query","text":"<pre><code>from django.db import connection\nclass RelatorioComplexo(APIView):\ndef get(self, request):\nwith connection.cursor() as cursor:\ncursor.execute(\"\"\"\n                SELECT \n                    c.nome,\n                    COUNT(p.id) as total_pedidos,\n                    SUM(p.valor) as valor_total\n                FROM clientes c\n                LEFT JOIN pedidos p ON p.cliente_id = c.id\n                GROUP BY c.nome\n            \"\"\")\ncolumns = [col[0] for col in cursor.description]\nreturn Response([\ndict(zip(columns, row))\nfor row in cursor.fetchall()\n])\n</code></pre>"},{"location":"auxiliares/conceitos/views.html#boas-praticas","title":"Boas Pr\u00e1ticas","text":"<ol> <li>Use ViewSets para opera\u00e7\u00f5es CRUD padr\u00e3o</li> <li>Implemente APIViews para endpoints espec\u00edficos</li> <li>Mantenha a l\u00f3gica de neg\u00f3cio nos models/services</li> <li>Use serializers para valida\u00e7\u00e3o de dados</li> <li>Implemente pagina\u00e7\u00e3o para grandes conjuntos</li> <li>Documente endpoints com drf-yasg/swagger</li> </ol>"},{"location":"auxiliares/conceitos/views.html#consideracoes-de-performance","title":"Considera\u00e7\u00f5es de Performance","text":"<ol> <li>Use select_related/prefetch_related para otimizar queries</li> <li>Implemente caching quando apropriado</li> <li>Pagine resultados grandes</li> <li>Use bulk operations para opera\u00e7\u00f5es em lote</li> </ol> <p>Consulte a documenta\u00e7\u00e3o espec\u00edfica de cada app para exemplos pr\u00e1ticos de implementa\u00e7\u00e3o no projeto.</p>"},{"location":"auxiliares/models/tipos_de_dados.html","title":"Tipos de Dados em Models Django","text":"<p>Esta p\u00e1gina apresenta os principais tipos de campos que podem ser usados em models Django, exemplos de uso e o paralelo com tipos SQL.</p>"},{"location":"auxiliares/models/tipos_de_dados.html#tipos-de-campos-e-paralelos-com-sql","title":"Tipos de campos e paralelos com SQL","text":"<ul> <li> <p>CharField   Django: <pre><code>nome = models.CharField(max_length=100)\n</code></pre>   SQL: <pre><code>nome VARCHAR(100)\n</code></pre>   Usado para textos curtos, nomes, c\u00f3digos.</p> </li> <li> <p>TextField   Django: <pre><code>descricao = models.TextField()\n</code></pre>   SQL: <pre><code>descricao TEXT\n</code></pre>   Usado para textos longos, descri\u00e7\u00f5es.</p> </li> <li> <p>IntegerField   Django: <pre><code>idade = models.IntegerField()\n</code></pre>   SQL: <pre><code>idade INTEGER\n</code></pre>   Usado para n\u00fameros inteiros.</p> </li> <li> <p>FloatField   Django: <pre><code>nota = models.FloatField()\n</code></pre>   SQL: <pre><code>nota FLOAT\n</code></pre>   Usado para n\u00fameros decimais de precis\u00e3o dupla.</p> </li> <li> <p>DecimalField   Django: <pre><code>preco = models.DecimalField(max_digits=10, decimal_places=2)\n</code></pre>   SQL: <pre><code>preco DECIMAL(10,2)\n</code></pre>   Usado para valores monet\u00e1rios ou decimais precisos.</p> </li> <li> <p>BooleanField   Django: <pre><code>ativo = models.BooleanField()\n</code></pre>   SQL: <pre><code>ativo BOOLEAN\n</code></pre>   Usado para valores verdadeiro/falso.</p> </li> <li> <p>DateField   Django: <pre><code>data_nascimento = models.DateField()\n</code></pre>   SQL: <pre><code>data_nascimento DATE\n</code></pre>   Usado para datas (sem hora).</p> </li> <li> <p>DateTimeField   Django: <pre><code>criado_em = models.DateTimeField(auto_now_add=True)\n</code></pre>   SQL: <pre><code>criado_em DATETIME\n</code></pre>   Usado para data e hora.</p> </li> <li> <p>TimeField   Django: <pre><code>horario = models.TimeField()\n</code></pre>   SQL: <pre><code>horario TIME\n</code></pre>   Usado para hor\u00e1rios.</p> </li> <li> <p>EmailField   Django: <pre><code>email = models.EmailField()\n</code></pre>   SQL: <pre><code>email VARCHAR(254)\n</code></pre>   Usado para e-mails, com valida\u00e7\u00e3o autom\u00e1tica.</p> </li> <li> <p>URLField   Django: <pre><code>site = models.URLField()\n</code></pre>   SQL: <pre><code>site VARCHAR(200)\n</code></pre>   Usado para URLs, com valida\u00e7\u00e3o autom\u00e1tica.</p> </li> <li> <p>AutoField   Django: <pre><code>id = models.AutoField(primary_key=True)\n</code></pre>   SQL: <pre><code>id SERIAL PRIMARY KEY\n</code></pre>   Usado para IDs auto-incrementais.</p> </li> <li> <p>BigAutoField   Django: <pre><code>id = models.BigAutoField(primary_key=True)\n</code></pre>   SQL: <pre><code>id BIGSERIAL PRIMARY KEY\n</code></pre>   Usado para IDs auto-incrementais grandes.</p> </li> <li> <p>ForeignKey   Django: <pre><code>cliente = models.ForeignKey(Cliente, on_delete=models.CASCADE)\n</code></pre>   SQL: <pre><code>cliente_id INTEGER REFERENCES cliente(id)\n</code></pre>   Relacionamento muitos-para-um.</p> </li> <li> <p>ManyToManyField   Django: <pre><code>grupos = models.ManyToManyField(Grupo)\n</code></pre>   SQL: <pre><code>-- Cria uma tabela associativa entre as tabelas relacionadas\n</code></pre>   Relacionamento muitos-para-muitos.</p> </li> <li> <p>OneToOneField   Django: <pre><code>perfil = models.OneToOneField(Perfil, on_delete=models.CASCADE)\n</code></pre>   SQL: <pre><code>perfil_id INTEGER UNIQUE REFERENCES perfil(id)\n</code></pre>   Relacionamento um-para-um.</p> </li> <li> <p>FileField / ImageField   Django: <pre><code>arquivo = models.FileField(upload_to='uploads/')\nfoto = models.ImageField(upload_to='fotos/')\n</code></pre>   SQL: <pre><code>arquivo VARCHAR(100)\nfoto VARCHAR(100)\n</code></pre>   Usado para armazenar o caminho do arquivo/imagem.</p> </li> </ul> <p>Estes s\u00e3o os tipos mais comuns. Consulte a documenta\u00e7\u00e3o oficial do Django para mais op\u00e7\u00f5es e detalhes.</p>"},{"location":"dw_analytics/index.html","title":"DW Analytics","text":""},{"location":"dw_analytics/index.html#visao-geral","title":"Vis\u00e3o Geral","text":"<p>O app dw_analytics \u00e9 respons\u00e1vel pela an\u00e1lise e manipula\u00e7\u00e3o de dados do Data Warehouse, fornecendo endpoints de API, modelos de dados e integra\u00e7\u00f5es para relat\u00f3rios e an\u00e1lises avan\u00e7adas.</p>"},{"location":"dw_analytics/index.html#principais-responsabilidades","title":"Principais responsabilidades:","text":"<ul> <li>Modelagem de dados do DW (tabelas fato e dimens\u00e3o)</li> <li>Exposi\u00e7\u00e3o de dados via API REST</li> <li>Integra\u00e7\u00e3o com outros sistemas anal\u00edticos</li> <li>Suporte a m\u00faltiplos bancos de dados</li> </ul>"},{"location":"dw_analytics/index.html#estrutura-da-documentacao","title":"Estrutura da Documenta\u00e7\u00e3o","text":"<ul> <li><code>models/</code>: Documenta\u00e7\u00e3o dos modelos de dados (tabelas fato e dimens\u00e3o).</li> <li><code>api/</code>: Documenta\u00e7\u00e3o das APIs, views e serializers.</li> <li><code>migrations/</code>: Detalhes sobre as migra\u00e7\u00f5es e estrutura do banco.</li> </ul> <p>Consulte cada se\u00e7\u00e3o para detalhes de uso, exemplos e explica\u00e7\u00f5es t\u00e9cnicas.</p>"},{"location":"dw_analytics/api/index.html","title":"API DW Analytics","text":"<p>Documenta\u00e7\u00e3o das views, serializers e endpoints REST do app dw_analytics.</p> <ul> <li><code>views/</code>: Documenta\u00e7\u00e3o das views e viewsets.</li> <li><code>serializers/</code>: Documenta\u00e7\u00e3o dos serializers utilizados.</li> <li><code>urls.md</code>: Rotas e exemplos de endpoints.</li> </ul>"},{"location":"dw_analytics/api/urls.html","title":"API - URLs","text":"<p>Este arquivo documenta as rotas principais expostas pelo app dw_analytics.</p>"},{"location":"dw_analytics/api/urls.html#exemplo-de-registro-de-rota-com-router-drf","title":"Exemplo de registro de rota com router DRF","text":"<pre><code>from rest_framework.routers import DefaultRouter\nfrom .views import FIncidentsBitaViewset\nrouter = DefaultRouter()\nrouter.register(\n\"f-incidents-bita\",\nviewset=FIncidentsBitaViewset,\nbasename=\"f-incidents-bita\",\n)\nurlpatterns = []\nurlpatterns += router.urls\n</code></pre> <ul> <li>Cada rota registrada exp\u00f5e um endpoint RESTful para o recurso correspondente.</li> <li>Para adicionar novas rotas, registre novos viewsets no router.</li> </ul>"},{"location":"dw_analytics/api/serializers/index.html","title":"Serializers","text":""},{"location":"dw_analytics/api/serializers/index.html#o-que-sao-serializers","title":"O que s\u00e3o serializers?","text":"<p>Serializers s\u00e3o componentes do Django REST Framework respons\u00e1veis por converter objetos Python/Django (geralmente modelos) em formatos que podem ser enviados via API (como JSON) e vice-versa.</p>"},{"location":"dw_analytics/api/serializers/index.html#para-que-servem","title":"Para que servem?","text":"<ul> <li>Serializar: Transformar objetos do banco de dados em JSON para resposta de API.</li> <li>Desserializar: Validar e transformar dados recebidos (JSON) em objetos Python/modelos.</li> <li>Valida\u00e7\u00e3o: Garantir que os dados recebidos est\u00e3o corretos antes de salvar no banco.</li> </ul>"},{"location":"dw_analytics/api/serializers/index.html#exemplo-basico-de-utilizacao","title":"Exemplo b\u00e1sico de utiliza\u00e7\u00e3o","text":"<pre><code>from rest_framework import serializers\nfrom .models import FIncidentsBita\nclass FIncidentsBitaSerializer(serializers.ModelSerializer):\nclass Meta:\nmodel = FIncidentsBita\nfields = \"__all__\"\n</code></pre> <ul> <li>O serializer acima converte todos os campos do modelo <code>FIncidentsBita</code> para JSON e valida dados recebidos para cria\u00e7\u00e3o/atualiza\u00e7\u00e3o.</li> </ul>"},{"location":"dw_analytics/api/serializers/index.html#exemplos-avancados-de-serializers","title":"Exemplos avan\u00e7ados de serializers","text":""},{"location":"dw_analytics/api/serializers/index.html#1-serializer-com-campos-calculados-concatenacao-agregacao-etc","title":"1. Serializer com campos calculados (concatena\u00e7\u00e3o, agrega\u00e7\u00e3o, etc.)","text":"<p><pre><code>from rest_framework import serializers\nfrom .models import FIncidentsBita\nclass FIncidentsBitaCustomSerializer(serializers.ModelSerializer):\ndescricao_completa = serializers.SerializerMethodField()\nclass Meta:\nmodel = FIncidentsBita\nfields = [\"id\", \"number\", \"assignment_group\", \"descricao_completa\"]\ndef get_descricao_completa(self, obj):\n# Exemplo: concatena dois campos do model\nreturn f\"{obj.number} - {obj.assignment_group}\"\n</code></pre> - <code>descricao_completa</code> \u00e9 um campo novo, criado a partir de outros campos do modelo.</p>"},{"location":"dw_analytics/api/serializers/index.html#2-serializer-retornando-apenas-campos-especificos","title":"2. Serializer retornando apenas campos espec\u00edficos","text":"<p><pre><code>from rest_framework import serializers\nfrom .models import FIncidentsBita\nclass FIncidentsBitaResumoSerializer(serializers.ModelSerializer):\nclass Meta:\nmodel = FIncidentsBita\nfields = [\"id\", \"number\", \"assignment_group\"]\n</code></pre> - Apenas os campos listados em <code>fields</code> ser\u00e3o retornados na resposta da API.</p>"},{"location":"dw_analytics/api/serializers/index.html#3-serializer-com-validacao-customizada","title":"3. Serializer com valida\u00e7\u00e3o customizada","text":"<p><pre><code>from rest_framework import serializers\nfrom .models import FIncidentsBita\nclass FIncidentsBitaValidaSerializer(serializers.ModelSerializer):\nclass Meta:\nmodel = FIncidentsBita\nfields = \"__all__\"\ndef validate_number(self, value):\nif not value.startswith(\"INC\"):\nraise serializers.ValidationError(\"O n\u00famero deve come\u00e7ar com 'INC'\")\nreturn value\n</code></pre> - O m\u00e9todo <code>validate_&lt;campo&gt;</code> permite validar valores de campos espec\u00edficos.</p>"},{"location":"dw_analytics/api/serializers/index.html#por-que-utilizar-serializers","title":"Por que utilizar serializers?","text":"<ul> <li>Padronizam a comunica\u00e7\u00e3o entre backend e frontend.</li> <li>Permitem valida\u00e7\u00e3o autom\u00e1tica dos dados.</li> <li>Facilitam a customiza\u00e7\u00e3o de campos e regras de neg\u00f3cio.</li> <li>Tornam o c\u00f3digo mais seguro e robusto.</li> </ul>"},{"location":"dw_analytics/api/serializers/index.html#como-usar","title":"Como usar","text":"<ul> <li>Crie um serializer para cada modelo que ser\u00e1 exposto via API.</li> <li>Use o serializer nas views para transformar dados de entrada e sa\u00edda.</li> <li>Pode customizar m\u00e9todos de valida\u00e7\u00e3o ou campos conforme necess\u00e1rio.</li> </ul>"},{"location":"dw_analytics/api/serializers/index.html#exemplo-pratico-em-uma-view","title":"Exemplo pr\u00e1tico em uma view","text":"<pre><code>from rest_framework.viewsets import ModelViewSet\nfrom .models import FIncidentsBita\nfrom .serializers import FIncidentsBitaSerializer\nclass FIncidentsBitaViewset(ModelViewSet):\nqueryset = FIncidentsBita.objects.all()\nserializer_class = FIncidentsBitaSerializer\n</code></pre> <p>Consulte os arquivos individuais para detalhes de cada serializer.</p>"},{"location":"dw_analytics/api/serializers/__init__.html","title":"<code>__init__.py</code> da pasta serializers","text":""},{"location":"dw_analytics/api/serializers/__init__.html#o-que-e","title":"O que \u00e9?","text":"<p>O arquivo <code>__init__.py</code> transforma a pasta <code>serializers</code> em um m\u00f3dulo Python, permitindo importar serializers diretamente do pacote. Ele centraliza os imports dos serializers do app.</p>"},{"location":"dw_analytics/api/serializers/__init__.html#para-que-serve","title":"Para que serve?","text":"<ul> <li>Facilita o import dos serializers em outros arquivos (ex: views).</li> <li>Mant\u00e9m o c\u00f3digo organizado e evita importa\u00e7\u00f5es circulares.</li> <li>Permite importar todos os serializers do app com uma \u00fanica linha.</li> </ul>"},{"location":"dw_analytics/api/serializers/__init__.html#exemplo-de-codigo","title":"Exemplo de c\u00f3digo","text":"<pre><code>from .f_incidents_bita_serializer import FIncidentsBitaSerializer\n</code></pre> <ul> <li>Importa o serializer do arquivo correspondente e o disponibiliza no pacote.</li> <li>Assim, em outros arquivos, pode-se importar diretamente:   <pre><code>from dw_analytics.api.serializers import FIncidentsBitaSerializer\n</code></pre></li> </ul>"},{"location":"dw_analytics/api/serializers/__init__.html#funcionamento-esperado","title":"Funcionamento esperado","text":"<ul> <li>Ao adicionar novos serializers, basta importar no <code>__init__.py</code> para que fiquem dispon\u00edveis no pacote.</li> <li>Mant\u00e9m a estrutura do projeto limpa e organizada.</li> </ul>"},{"location":"dw_analytics/api/serializers/__init__.html#o-que-pode-e-nao-pode-alterar","title":"O que pode e n\u00e3o pode alterar","text":"<ul> <li>Pode: Adicionar/remover imports conforme novos serializers s\u00e3o criados ou removidos.</li> <li>N\u00e3o pode: Remover o arquivo <code>__init__.py</code> se quiser manter a pasta como m\u00f3dulo Python.</li> </ul>"},{"location":"dw_analytics/api/serializers/f_incidents_bita_serializer.html","title":"<code>f_incidents_bita_serializer.py</code>","text":""},{"location":"dw_analytics/api/serializers/f_incidents_bita_serializer.html#o-que-e","title":"O que \u00e9?","text":"<p>Arquivo que define o serializer respons\u00e1vel por converter o modelo <code>FIncidentsBita</code> para JSON e validar dados recebidos via API.</p>"},{"location":"dw_analytics/api/serializers/f_incidents_bita_serializer.html#codigo-explicado-ponto-a-ponto","title":"C\u00f3digo explicado ponto a ponto","text":"<p><pre><code>from rest_framework import serializers\nfrom ...models import FIncidentsBita\n</code></pre> - Importa o m\u00f3dulo de serializers do DRF. - Importa o modelo <code>FIncidentsBita</code> que ser\u00e1 serializado.</p> <p><pre><code>class FIncidentsBitaSerializer(serializers.ModelSerializer):\nclass Meta:\nmodel = FIncidentsBita\nfields = \"__all__\"  # Retorna todos os campos do model\n</code></pre> - Define a classe <code>FIncidentsBitaSerializer</code>, herdando de <code>ModelSerializer</code> (serializa\u00e7\u00e3o autom\u00e1tica baseada no modelo). - <code>model = FIncidentsBita</code>: Indica qual modelo ser\u00e1 serializado. - <code>fields = \"__all__\"</code>: Inclui todos os campos do modelo na serializa\u00e7\u00e3o.</p>"},{"location":"dw_analytics/api/serializers/f_incidents_bita_serializer.html#funcionamento-esperado","title":"Funcionamento esperado","text":"<ul> <li>Ao usar este serializer em uma view, todos os campos do modelo ser\u00e3o convertidos para JSON automaticamente.</li> <li>Ao receber dados para cria\u00e7\u00e3o/atualiza\u00e7\u00e3o, o serializer valida e converte para o modelo Django.</li> </ul>"},{"location":"dw_analytics/api/serializers/f_incidents_bita_serializer.html#o-que-pode-e-nao-pode-alterar","title":"O que pode e n\u00e3o pode alterar","text":"<ul> <li>Pode: Customizar campos, adicionar valida\u00e7\u00f5es extras, sobrescrever m\u00e9todos de valida\u00e7\u00e3o.</li> <li>N\u00e3o pode: Remover a heran\u00e7a de <code>ModelSerializer</code> se quiser manter a serializa\u00e7\u00e3o autom\u00e1tica baseada no modelo.</li> </ul>"},{"location":"dw_analytics/api/views/index.html","title":"Views","text":""},{"location":"dw_analytics/api/views/index.html#o-que-sao-views-em-pythondjango","title":"O que s\u00e3o views em Python/Django?","text":"<p>No contexto do Django, views s\u00e3o fun\u00e7\u00f5es ou classes respons\u00e1veis por receber uma requisi\u00e7\u00e3o HTTP, processar dados (consultar banco, aplicar regras de neg\u00f3cio, etc.) e retornar uma resposta HTTP (geralmente JSON em APIs).</p> <ul> <li>Em APIs REST, as views geralmente herdam de classes do Django REST Framework, como <code>APIView</code> ou <code>ModelViewSet</code>.</li> </ul>"},{"location":"dw_analytics/api/views/index.html#estrutura-basica-de-uma-view","title":"Estrutura b\u00e1sica de uma view","text":""},{"location":"dw_analytics/api/views/index.html#exemplo-de-funcao-view","title":"Exemplo de fun\u00e7\u00e3o view","text":"<pre><code>from rest_framework.decorators import api_view\nfrom rest_framework.response import Response\n@api_view(['GET'])\ndef minha_view(request):\ndata = {\"mensagem\": \"Ol\u00e1, mundo!\"}\nreturn Response(data)\n</code></pre>"},{"location":"dw_analytics/api/views/index.html#exemplo-de-viewset-crud-completo","title":"Exemplo de viewset (CRUD completo)","text":"<pre><code>from rest_framework.viewsets import ModelViewSet\nfrom .models import FIncidentsBita\nfrom .serializers import FIncidentsBitaSerializer\nclass FIncidentsBitaViewset(ModelViewSet):\nqueryset = FIncidentsBita.objects.all()\nserializer_class = FIncidentsBitaSerializer\n</code></pre>"},{"location":"dw_analytics/api/views/index.html#onde-importar-e-por-que-importar-views-nos-__init__py","title":"Onde importar e por que importar views nos <code>__init__.py</code>","text":"<ul> <li>As views devem ser importadas no <code>__init__.py</code> do m\u00f3dulo para facilitar o import em outros lugares (ex: arquivos de rotas/urls).</li> <li>Isso permite importar todas as views do app com uma \u00fanica linha, mantendo o c\u00f3digo organizado e evitando importa\u00e7\u00f5es circulares.</li> </ul> <p>Exemplo: <pre><code># dw_analytics/api/views/__init__.py\nfrom .f_incidents_bita_viewset import FIncidentsBitaViewset\n</code></pre></p>"},{"location":"dw_analytics/api/views/index.html#relacao-entre-views-python-e-views-sql","title":"Rela\u00e7\u00e3o entre views Python e views SQL","text":"<ul> <li>Views em SQL: S\u00e3o consultas salvas no banco de dados, que podem ser usadas como tabelas virtuais para facilitar consultas complexas.</li> <li>Views em Django/Python: S\u00e3o pontos de entrada para requisi\u00e7\u00f5es HTTP, podendo retornar dados de qualquer fonte (incluindo views SQL, tabelas, arquivos, etc).</li> </ul> <p>Paralelo: - Uma view SQL encapsula uma consulta; - Uma view Python encapsula uma l\u00f3gica de neg\u00f3cio e pode, inclusive, consultar uma view SQL para retornar dados.</p>"},{"location":"dw_analytics/api/views/index.html#como-construir-uma-view","title":"Como construir uma view","text":"<ol> <li>Defina o que a view deve fazer (listar, criar, atualizar, deletar, etc).</li> <li>Implemente como fun\u00e7\u00e3o ou classe (preferencialmente classe para CRUD).</li> <li>Implemente o serializer para transformar modelos em JSON.</li> <li>Registre a view no arquivo de rotas (<code>urls.py</code>).</li> </ol>"},{"location":"dw_analytics/api/views/index.html#exemplo-pratico","title":"Exemplo pr\u00e1tico","text":"<pre><code># views/f_incidents_bita_viewset.py\nfrom rest_framework.viewsets import ModelViewSet\nfrom ...models import FIncidentsBita\nfrom ..serializers import FIncidentsBitaSerializer\nclass FIncidentsBitaViewset(ModelViewSet):\nqueryset = FIncidentsBita.objects.all()\nserializer_class = FIncidentsBitaSerializer\n</code></pre> <pre><code># api/urls.py\nfrom rest_framework.routers import DefaultRouter\nfrom .views import FIncidentsBitaViewset\nrouter = DefaultRouter()\nrouter.register(\"f-incidents-bita\", FIncidentsBitaViewset)\nurlpatterns = router.urls\n</code></pre>"},{"location":"dw_analytics/api/views/index.html#resumo","title":"Resumo","text":"<ul> <li>Views Python s\u00e3o respons\u00e1veis por processar requisi\u00e7\u00f5es e retornar respostas.</li> <li>S\u00e3o essenciais para expor dados do banco (inclusive views SQL) via API.</li> <li>Devem ser importadas nos <code>__init__.py</code> para facilitar a organiza\u00e7\u00e3o e o uso em rotas.</li> <li>A estrutura b\u00e1sica envolve herdar de classes do DRF e registrar as views nas rotas do app.</li> </ul>"},{"location":"dw_analytics/api/views/__init__.html","title":"<code>__init__.py</code> da pasta views","text":""},{"location":"dw_analytics/api/views/__init__.html#o-que-e","title":"O que \u00e9?","text":"<p>O arquivo <code>__init__.py</code> transforma a pasta <code>views</code> em um m\u00f3dulo Python, permitindo importar views diretamente do pacote. Ele tamb\u00e9m serve para centralizar e facilitar os imports das views do app.</p>"},{"location":"dw_analytics/api/views/__init__.html#para-que-serve","title":"Para que serve?","text":"<ul> <li>Permite importar todas as views do app de forma centralizada.</li> <li>Facilita o uso em arquivos de rotas (<code>urls.py</code>), evitando m\u00faltiplos imports espalhados.</li> <li>Ajuda a evitar problemas de importa\u00e7\u00e3o circular.</li> </ul>"},{"location":"dw_analytics/api/views/__init__.html#exemplo-de-codigo","title":"Exemplo de c\u00f3digo","text":"<pre><code>from .f_incidents_bita_viewset import FIncidentsBitaViewset\n</code></pre> <ul> <li>Este comando importa a classe <code>FIncidentsBitaViewset</code> do arquivo <code>f_incidents_bita_viewset.py</code> e a disponibiliza no pacote <code>views</code>.</li> <li>Assim, em outros arquivos, voc\u00ea pode importar diretamente:   <pre><code>from dw_analytics.api.views import FIncidentsBitaViewset\n</code></pre></li> </ul>"},{"location":"dw_analytics/api/views/__init__.html#funcionamento-esperado","title":"Funcionamento esperado","text":"<ul> <li>Ao adicionar novas views, basta importar no <code>__init__.py</code> para que fiquem dispon\u00edveis no pacote.</li> <li>Mant\u00e9m o c\u00f3digo limpo e organizado, especialmente em projetos grandes.</li> </ul>"},{"location":"dw_analytics/api/views/__init__.html#o-que-pode-e-nao-pode-alterar","title":"O que pode e n\u00e3o pode alterar","text":"<ul> <li>Pode: Adicionar/remover imports conforme novas views s\u00e3o criadas ou removidas.</li> <li>N\u00e3o pode: Remover o arquivo <code>__init__.py</code> se quiser manter a pasta como m\u00f3dulo Python.</li> </ul>"},{"location":"dw_analytics/api/views/f_incidents_bita_viewset.html","title":"<code>f_incidents_bita_viewset.py</code>","text":""},{"location":"dw_analytics/api/views/f_incidents_bita_viewset.html#o-que-e","title":"O que \u00e9?","text":"<p>Arquivo que define o viewset respons\u00e1vel por expor a API para o modelo <code>FIncidentsBita</code> do app dw_analytics.</p>"},{"location":"dw_analytics/api/views/f_incidents_bita_viewset.html#codigo-explicado-ponto-a-ponto","title":"C\u00f3digo explicado ponto a ponto","text":"<p><pre><code>from rest_framework.viewsets import ModelViewSet\n</code></pre> - Importa o <code>ModelViewSet</code> do Django REST Framework, que j\u00e1 implementa todas as opera\u00e7\u00f5es CRUD (listar, criar, atualizar, deletar).</p> <p><pre><code>from app.utils.paginators import CustomLargePagination\n</code></pre> - Importa um paginador customizado, que define o tamanho das p\u00e1ginas e o formato da resposta paginada.</p> <p><pre><code>from ...models import FIncidentsBita\nfrom ..serializers import FIncidentsBitaSerializer\n</code></pre> - Importa o modelo <code>FIncidentsBita</code> (representa a tabela no banco de dados). - Importa o serializer, respons\u00e1vel por converter o modelo em JSON para a API.</p> <p><pre><code>class FIncidentsBitaViewset(ModelViewSet):\nserializer_class = FIncidentsBitaSerializer\nqueryset = FIncidentsBita.objects.using(\"dw_analytics\").all()\npagination_class = CustomLargePagination\n</code></pre> - Define a classe <code>FIncidentsBitaViewset</code>, herdando de <code>ModelViewSet</code>. - <code>serializer_class</code>: Indica qual serializer ser\u00e1 usado para transformar os dados. - <code>queryset</code>: Define o conjunto de dados que ser\u00e1 exposto pela API. O m\u00e9todo <code>.using(\"dw_analytics\")</code> garante que a consulta ser\u00e1 feita no banco correto. - <code>pagination_class</code>: Define o paginador a ser usado para as respostas dessa view.</p>"},{"location":"dw_analytics/api/views/f_incidents_bita_viewset.html#funcionamento-esperado","title":"Funcionamento esperado","text":"<ul> <li>A view exp\u00f5e endpoints RESTful para listar, criar, atualizar e deletar registros de <code>FIncidentsBita</code>.</li> <li>As respostas s\u00e3o paginadas conforme definido em <code>CustomLargePagination</code>.</li> <li>O serializer garante que os dados estejam no formato correto para a API.</li> </ul>"},{"location":"dw_analytics/api/views/f_incidents_bita_viewset.html#o-que-pode-e-nao-pode-alterar","title":"O que pode e n\u00e3o pode alterar","text":"<ul> <li>Pode: Customizar o queryset, trocar o serializer, alterar o paginador, sobrescrever m\u00e9todos para l\u00f3gica customizada.</li> <li>N\u00e3o pode: Remover a heran\u00e7a de <code>ModelViewSet</code> se quiser manter as opera\u00e7\u00f5es CRUD autom\u00e1ticas.</li> </ul>"},{"location":"dw_analytics/migrations/index.html","title":"Migrations","text":""},{"location":"dw_analytics/migrations/index.html#o-que-sao-migrations","title":"O que s\u00e3o migrations?","text":"<p>Migrations s\u00e3o arquivos gerados pelo Django que registram e controlam todas as altera\u00e7\u00f5es feitas na estrutura do banco de dados (schema). Elas funcionam como um \"hist\u00f3rico versionado\" das tabelas, campos e relacionamentos do seu projeto.</p>"},{"location":"dw_analytics/migrations/index.html#para-que-servem","title":"Para que servem?","text":"<ul> <li>Criar tabelas e campos no banco de dados automaticamente.</li> <li>Alterar a estrutura existente (adicionar/remover campos, mudar tipos, criar \u00edndices, etc).</li> <li>Remover tabelas/campos que n\u00e3o s\u00e3o mais necess\u00e1rios.</li> <li>Sincronizar o c\u00f3digo Python dos modelos com o banco de dados real.</li> </ul>"},{"location":"dw_analytics/migrations/index.html#quando-fazer-uma-migration","title":"Quando fazer uma migration?","text":"<ul> <li>Sempre que voc\u00ea criar, alterar ou remover um modelo ou campo em qualquer arquivo <code>models.py</code>.</li> <li>Exemplo: adicionou um campo novo em um modelo? Rode <code>python manage.py makemigrations</code>.</li> </ul>"},{"location":"dw_analytics/migrations/index.html#como-funcionam","title":"Como funcionam?","text":"<ul> <li>O Django compara o estado atual dos modelos Python com o hist\u00f3rico de migrations j\u00e1 aplicadas.</li> <li>Gera um novo arquivo de migration descrevendo as mudan\u00e7as.</li> <li>Ao rodar <code>python manage.py migrate</code>, o Django executa as opera\u00e7\u00f5es no banco de dados conforme descrito nas migrations.</li> </ul>"},{"location":"dw_analytics/migrations/index.html#como-entender-o-codigo-de-uma-migration","title":"Como entender o c\u00f3digo de uma migration?","text":"<ul> <li>Cada migration \u00e9 uma classe com uma lista de opera\u00e7\u00f5es (<code>operations = [...]</code>).</li> <li>Exemplos de opera\u00e7\u00f5es:</li> <li><code>CreateModel</code>: Cria uma nova tabela/modelo.</li> <li><code>AddField</code>: Adiciona um campo a uma tabela existente.</li> <li><code>AlterField</code>: Altera o tipo ou op\u00e7\u00f5es de um campo.</li> <li><code>RemoveField</code>: Remove um campo de uma tabela.</li> <li><code>DeleteModel</code>: Remove uma tabela/modelo.</li> </ul> <p>Exemplo: <pre><code>from django.db import migrations, models\nclass Migration(migrations.Migration):\noperations = [\nmigrations.CreateModel(\nname='MinhaTabela',\nfields=[\n('id', models.AutoField(primary_key=True)),\n('nome', models.CharField(max_length=100)),\n],\n),\nmigrations.AddField(\nmodel_name='outratabela',\nname='novo_campo',\nfield=models.IntegerField(null=True),\n),\n]\n</code></pre></p>"},{"location":"dw_analytics/migrations/index.html#boas-praticas","title":"Boas pr\u00e1ticas","text":"<ul> <li>Sempre fa\u00e7a commit dos arquivos de migration junto com as altera\u00e7\u00f5es nos modelos.</li> <li>N\u00e3o edite migrations antigas manualmente (exceto em casos muito espec\u00edficos e com cuidado).</li> <li>Use <code>makemigrations</code> para gerar e <code>migrate</code> para aplicar as mudan\u00e7as.</li> </ul> <p>Consulte os arquivos individuais para detalhes de cada migration.</p>"},{"location":"dw_analytics/models/index.html","title":"Modelos DW Analytics","text":""},{"location":"dw_analytics/models/index.html#o-que-sao-models-no-django","title":"O que s\u00e3o models no Django?","text":"<p>Models s\u00e3o classes Python que representam tabelas do banco de dados. Cada atributo da classe corresponde a uma coluna da tabela, e cada inst\u00e2ncia da classe representa uma linha (registro) da tabela.</p>"},{"location":"dw_analytics/models/index.html#paralelo-com-sql","title":"Paralelo com SQL","text":"<ul> <li>Model Django = Tabela SQL</li> <li>Campo do model = Coluna da tabela</li> <li>Inst\u00e2ncia do model = Linha/registro da tabela</li> </ul> <p>Exemplo: <pre><code>class Cliente(models.Model):\nnome = models.CharField(max_length=100)\nidade = models.IntegerField()\n</code></pre> Equivalente em SQL: <pre><code>CREATE TABLE cliente (\nid SERIAL PRIMARY KEY,\nnome VARCHAR(100),\nidade INTEGER\n);\n</code></pre></p>"},{"location":"dw_analytics/models/index.html#tipos-de-dados-em-models-django","title":"Tipos de dados em models Django","text":"<p>Veja a p\u00e1gina Tipos de Dados em Models Django para uma explica\u00e7\u00e3o detalhada dos tipos de campos dispon\u00edveis, exemplos de uso e paralelos com SQL.</p>"},{"location":"dw_analytics/models/index.html#para-que-servem","title":"Para que servem?","text":"<ul> <li>Definir a estrutura dos dados do seu sistema.</li> <li>Permitir que o Django crie, altere e remova tabelas automaticamente via migrations.</li> <li>Facilitar consultas, inser\u00e7\u00f5es, atualiza\u00e7\u00f5es e dele\u00e7\u00f5es usando Python, sem escrever SQL manualmente.</li> </ul>"},{"location":"dw_analytics/models/index.html#como-o-django-trabalha-com-models","title":"Como o Django trabalha com models","text":"<ul> <li>O Django converte cada model em uma tabela no banco de dados.</li> <li>Usa as models para gerar formul\u00e1rios, serializers, admin, etc.</li> <li>Permite consultar e manipular dados usando a ORM (Object-Relational Mapping).</li> </ul> <p>Exemplo de consulta: <pre><code>clientes = Cliente.objects.filter(idade__gte=18)\n</code></pre> Equivalente em SQL: <pre><code>SELECT * FROM cliente WHERE idade &gt;= 18;\n</code></pre></p>"},{"location":"dw_analytics/models/index.html#como-usar-models-em-views-ou-pipelines-tasks","title":"Como usar models em views ou pipelines (tasks)","text":"<ul> <li>Em views, voc\u00ea pode consultar, criar ou atualizar registros usando a model:     <pre><code>from .models import Cliente\ndef listar_clientes_maiores(request):\nmaiores = Cliente.objects.filter(idade__gte=18)\n# ...retornar resposta...\n</code></pre></li> <li>Em pipelines/tasks, use as models para ler ou gravar dados durante o processamento:     <pre><code>from .models import Cliente\ndef processar_clientes():\nfor cliente in Cliente.objects.all():\n# ...processamento...\n</code></pre></li> </ul>"},{"location":"dw_analytics/models/index.html#como-criar-um-model","title":"Como criar um model","text":"<ol> <li>Crie uma classe que herda de <code>models.Model</code>:     <pre><code>from django.db import models\nclass Produto(models.Model):\nnome = models.CharField(max_length=100)\npreco = models.DecimalField(max_digits=10, decimal_places=2)\n</code></pre></li> <li>Adicione o model ao arquivo <code>models/__init__.py</code> para facilitar os imports:     <pre><code>from .produto import Produto\n</code></pre></li> <li>Rode <code>python manage.py makemigrations</code> e <code>python manage.py migrate</code> para criar a tabela no banco.</li> </ol>"},{"location":"dw_analytics/models/index.html#boas-praticas-e-pontos-importantes","title":"Boas pr\u00e1ticas e pontos importantes","text":"<ul> <li>Sempre defina o campo <code>Meta: db_table</code> se quiser controlar o nome da tabela no banco.</li> <li>Use <code>app_label</code> em projetos multi-app para garantir que o Django reconhe\u00e7a o app correto.</li> <li>Prefira nomes de campos e tabelas em ingl\u00eas para projetos internacionais, mas siga o padr\u00e3o do projeto.</li> <li>Utilize m\u00e9todos customizados no model para regras de neg\u00f3cio relacionadas \u00e0quela tabela.</li> <li>Models podem ter relacionamentos (<code>ForeignKey</code>, <code>ManyToManyField</code>, etc.), representando chaves estrangeiras e tabelas de associa\u00e7\u00e3o no SQL.</li> </ul>"},{"location":"dw_analytics/models/index.html#resumo","title":"Resumo","text":"<ul> <li>Models s\u00e3o a base do mapeamento entre Python e SQL no Django.</li> <li>Permitem manipular dados do banco de forma orientada a objetos.</li> <li>S\u00e3o essenciais para views, serializers, pipelines e qualquer l\u00f3gica de dados do projeto.</li> </ul> <p>Consulte os arquivos individuais para detalhes de cada modelo. - Permite consultar e manipular dados usando a ORM (Object-Relational Mapping).</p> <p>Exemplo de consulta: <pre><code>clientes = Cliente.objects.filter(idade__gte=18)\n</code></pre> Equivalente em SQL: <pre><code>SELECT * FROM cliente WHERE idade &gt;= 18;\n</code></pre></p>"},{"location":"dw_analytics/models/index.html#como-usar-models-em-views-ou-pipelines-tasks_1","title":"Como usar models em views ou pipelines (tasks)","text":"<ul> <li>Em views, voc\u00ea pode consultar, criar ou atualizar registros usando a model:     <pre><code>from .models import Cliente\ndef listar_clientes_maiores(request):\nmaiores = Cliente.objects.filter(idade__gte=18)\n# ...retornar resposta...\n</code></pre></li> <li>Em pipelines/tasks, use as models para ler ou gravar dados durante o processamento:     <pre><code>from .models import Cliente\ndef processar_clientes():\nfor cliente in Cliente.objects.all():\n# ...processamento...\n</code></pre></li> </ul>"},{"location":"dw_analytics/models/index.html#como-criar-um-model_1","title":"Como criar um model","text":"<ol> <li>Crie uma classe que herda de <code>models.Model</code>:     <pre><code>from django.db import models\nclass Produto(models.Model):\nnome = models.CharField(max_length=100)\npreco = models.DecimalField(max_digits=10, decimal_places=2)\n</code></pre></li> <li>Adicione o model ao arquivo <code>models/__init__.py</code> para facilitar os imports:     <pre><code>from .produto import Produto\n</code></pre></li> <li>Rode <code>python manage.py makemigrations</code> e <code>python manage.py migrate</code> para criar a tabela no banco.</li> </ol>"},{"location":"dw_analytics/models/index.html#boas-praticas-e-pontos-importantes_1","title":"Boas pr\u00e1ticas e pontos importantes","text":"<ul> <li>Sempre defina o campo <code>Meta: db_table</code> se quiser controlar o nome da tabela no banco.</li> <li>Use <code>app_label</code> em projetos multi-app para garantir que o Django reconhe\u00e7a o app correto.</li> <li>Prefira nomes de campos e tabelas em ingl\u00eas para projetos internacionais, mas siga o padr\u00e3o do projeto.</li> <li>Utilize m\u00e9todos customizados no model para regras de neg\u00f3cio relacionadas \u00e0quela tabela.</li> <li>Models podem ter relacionamentos (<code>ForeignKey</code>, <code>ManyToManyField</code>, etc.), representando chaves estrangeiras e tabelas de associa\u00e7\u00e3o no SQL.</li> </ul>"},{"location":"dw_analytics/models/index.html#resumo_1","title":"Resumo","text":"<ul> <li>Models s\u00e3o a base do mapeamento entre Python e SQL no Django.</li> <li>Permitem manipular dados do banco de forma orientada a objetos.</li> <li>S\u00e3o essenciais para views, serializers, pipelines e qualquer l\u00f3gica de dados do projeto.</li> </ul> <p>Consulte os arquivos individuais para detalhes de cada modelo.</p>"},{"location":"dw_analytics/models/todas_as_models.html","title":"Documenta\u00e7\u00e3o das Models do app <code>dw_analytics</code>","text":"<p>Este documento detalha cada model do app, explicando campos, tipos, relacionamentos e finalidade.</p>"},{"location":"dw_analytics/models/todas_as_models.html#dassignmentgroup","title":"<code>DAssignmentGroup</code>","text":"<p><pre><code>class DAssignmentGroup(models.Model):\nid = models.CharField(primary_key=True, max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\")\ndv_assignment_group = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\")\nstatus = models.BooleanField()\n</code></pre> - id: Identificador \u00fanico do grupo de atendimento (string). - dv_assignment_group: Nome do grupo. - status: Indica se o grupo est\u00e1 ativo.</p>"},{"location":"dw_analytics/models/todas_as_models.html#dcompany","title":"<code>DCompany</code>","text":"<p><pre><code>class DCompany(models.Model):\nid = models.CharField(primary_key=True, max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\")\ndv_company = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\")\nu_cnpj = models.CharField(max_length=14, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\n</code></pre> - id: Identificador \u00fanico da empresa. - dv_company: Nome da empresa. - u_cnpj: CNPJ da empresa.</p>"},{"location":"dw_analytics/models/todas_as_models.html#dcontract","title":"<code>DContract</code>","text":"<p><pre><code>class DContract(models.Model):\nid = models.CharField(primary_key=True, max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\")\ndv_contract = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\")\n</code></pre> - id: Identificador do contrato. - dv_contract: Nome ou c\u00f3digo do contrato.</p>"},{"location":"dw_analytics/models/todas_as_models.html#doperacao","title":"<code>DOperacao</code>","text":"<p><pre><code>class DOperacao(models.Model):\nid = models.CharField(primary_key=True, max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\")\ndv_company = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\noperacao = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\n</code></pre> - id: Identificador da opera\u00e7\u00e3o. - dv_company: Empresa relacionada. - operacao: Nome da opera\u00e7\u00e3o.</p>"},{"location":"dw_analytics/models/todas_as_models.html#dpremissas","title":"<code>DPremissas</code>","text":"<p><pre><code>class DPremissas(models.Model):\nassignment = models.ForeignKey(DAssignmentGroup, on_delete=models.CASCADE)\nqtd_incidents = models.IntegerField()\nis_contrato_lancado = models.BooleanField()\nis_horas_lancadas = models.BooleanField()\nis_has_met_first_response_target = models.BooleanField()\nis_resolution_target = models.BooleanField()\nis_atualizacao_logs_correto = models.BooleanField()\nis_ticket_encerrado_corretamente = models.BooleanField()\nis_descricao_troubleshooting = models.BooleanField()\nis_cliente_notificado = models.BooleanField()\nis_category_correto = models.BooleanField()\n</code></pre> - assignment: FK para grupo de atendimento. - qtd_incidents: Quantidade de incidentes. - is_*: Diversos campos booleanos para controle de premissas de qualidade.</p>"},{"location":"dw_analytics/models/todas_as_models.html#dresolvedby","title":"<code>DResolvedBy</code>","text":"<p><pre><code>class DResolvedBy(models.Model):\nid = models.CharField(primary_key=True, max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\")\ndv_resolved_by = models.CharField(max_length=80, db_collation=\"SQL_Latin1_General_CP1_CI_AS\")\n</code></pre> - id: Identificador do resolvedor. - dv_resolved_by: Nome do resolvedor.</p>"},{"location":"dw_analytics/models/todas_as_models.html#dresolvedbyassignmentgroup","title":"<code>DResolvedByAssignmentGroup</code>","text":"<p><pre><code>class DResolvedByAssignmentGroup(models.Model):\nassignment_group = models.ForeignKey(DAssignmentGroup, on_delete=models.CASCADE)\nresolved_by = models.ForeignKey(DResolvedBy, on_delete=models.CASCADE)\n</code></pre> - assignment_group: FK para grupo de atendimento. - resolved_by: FK para resolvedor.</p>"},{"location":"dw_analytics/models/todas_as_models.html#dsortedticket","title":"<code>DSortedTicket</code>","text":"<p><pre><code>class DSortedTicket(models.Model):\nincident = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\")\nmes_ano = models.CharField(max_length=7, db_collation=\"SQL_Latin1_General_CP1_CI_AS\")\n</code></pre> - incident: Identificador do incidente. - mes_ano: M\u00eas e ano do ticket.</p>"},{"location":"dw_analytics/models/todas_as_models.html#fincident","title":"<code>FIncident</code>","text":"<p><pre><code>class FIncident(models.Model):\nnumber = models.CharField(unique=True, max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\")\nresolved_by = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nassignment_group = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nopened_at = models.DateTimeField()\nclosed_at = models.DateTimeField(blank=True, null=True)\ncontract = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nsla_atendimento = models.BooleanField(blank=True, null=True)\nsla_resolucao = models.BooleanField(blank=True, null=True)\ncompany = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nu_origem = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\ndv_u_categoria_da_falha = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\ndv_u_sub_categoria_da_falha = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\ndv_u_detalhe_sub_categoria_da_falha = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\ndv_state = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nu_id_vgr = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nu_id_vantive = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\ndv_category = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\ndv_subcategory = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\ndv_u_detail_subcategory = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nu_tipo_indisponibilidade = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nsys_id = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nresolved_at = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nscr_vendor_ticket = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nu_tipo_de_procedencia = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\ndv_sla_resolved = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\ndv_sla_first = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\n</code></pre> - Campos principais de um incidente, incluindo datas, grupos, status, SLA, etc.</p>"},{"location":"dw_analytics/models/todas_as_models.html#fincidentsbita","title":"<code>FIncidentsBita</code>","text":"<p><pre><code>class FIncidentsBita(models.Model):\nid = models.AutoField(primary_key=True)\nnumber = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nassignment_group = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nresolved_at = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nu_origem = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nopened_at = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nopened_by = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nassigned_to = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nresolved_by = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\ndescription = models.TextField(db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nshort_description = models.TextField(db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\ndv_state = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nclose_notes = models.CharField(max_length=1000, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\npriority = models.IntegerField(blank=True, null=True)\nupdated_at = models.DateTimeField(auto_now_add=True)\n</code></pre> - Campos principais de incidentes BITA, incluindo descri\u00e7\u00f5es, datas, respons\u00e1veis, prioridade, etc.</p>"},{"location":"dw_analytics/models/todas_as_models.html#fincidenttask","title":"<code>FIncidentTask</code>","text":"<p><pre><code>class FIncidentTask(models.Model):\nincident = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nu_operadora_integrador = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nu_outros = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nu_designa_o_lp = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nu_protocolo = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nu_data_in_cio = models.DateTimeField(blank=True, null=True)\nu_data_fim = models.DateTimeField(blank=True, null=True)\nu_tipo_acionamento = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nu_produto = models.CharField(max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\n</code></pre> - Campos de tarefas relacionadas a incidentes.</p>"},{"location":"dw_analytics/models/todas_as_models.html#fplantavgr","title":"<code>FPlantaVgr</code>","text":"<p><pre><code>class FPlantaVgr(models.Model):\nid_vantive = models.IntegerField(db_column=\"ID_VANTIVE\", blank=True, null=True)\nraiz_cod_cli = models.BigIntegerField(db_column=\"RAIZ_COD_CLI\", blank=True, null=True)\ncod_grupo = models.DecimalField(db_column=\"COD_GRUPO\", max_digits=18, decimal_places=0, blank=True, null=True)\ncliente = models.CharField(db_column=\"CLIENTE\", max_length=300, db_collation=\"Latin1_General_CI_AS\", blank=True, null=True)\ngrupo_economico = models.CharField(db_column=\"GRUPO_ECONOMICO\", max_length=350, db_collation=\"Latin1_General_CI_AS\", blank=True, null=True)\ncnpj = models.CharField(db_column=\"CNPJ\", max_length=30, db_collation=\"Latin1_General_CI_AS\", blank=True, null=True)\nstatus_vantive = models.CharField(db_column=\"STATUS_VANTIVE\", max_length=250, db_collation=\"Latin1_General_CI_AS\", blank=True, null=True)\nservico = models.CharField(db_column=\"SERVICO\", max_length=100, db_collation=\"Latin1_General_CI_AS\", blank=True, null=True)\nendereco_completo = models.TextField(db_column=\"ENDERECO_COMPLETO\", db_collation=\"Latin1_General_CI_AS\", blank=True, null=True)\ncidade = models.CharField(db_column=\"CIDADE\", max_length=100, db_collation=\"Latin1_General_CI_AS\", blank=True, null=True)\nuf = models.CharField(db_column=\"UF\", max_length=20, db_collation=\"Latin1_General_CI_AS\", blank=True, null=True)\ncep = models.CharField(db_column=\"CEP\", max_length=10, db_collation=\"Latin1_General_CI_AS\", blank=True, null=True)\nregional = models.CharField(db_column=\"REGIONAL\", max_length=100, db_collation=\"Latin1_General_CI_AS\", blank=True, null=True)\ndata_contrato = models.DateTimeField(db_column=\"DATA_CONTRATO\", blank=True, null=True)\ndata_entrada = models.DateField(db_column=\"DATA_ENTRADA\", blank=True, null=True)\ndata_rfs = models.DateField(db_column=\"DATA_RFS\", blank=True, null=True)\ndata_rfb = models.DateField(db_column=\"DATA_RFB\", blank=True, null=True)\ndata_rfb_nao_faturavel = models.DateTimeField(db_column=\"DATA_RFB_NAO_FATURAVEL\", blank=True, null=True)\ndata_cancelamento = models.DateTimeField(db_column=\"DATA_CANCELAMENTO\", blank=True, null=True)\nisis_cancelamento_motivo = models.CharField(db_column=\"ISIS_CANCELAMENTO_MOTIVO\", max_length=100, db_collation=\"Latin1_General_CI_AS\", blank=True, null=True)\njustif_rfb = models.CharField(db_column=\"JUSTIF_RFB\", max_length=50, db_collation=\"Latin1_General_CI_AS\", blank=True, null=True)\nisis_motivo_pendencia = models.CharField(db_column=\"ISIS_MOTIVO_PENDENCIA\", max_length=300, db_collation=\"Latin1_General_CI_AS\", blank=True, null=True)\ncombo = models.IntegerField(db_column=\"COMBO\", blank=True, null=True)\ncaixa_unica = models.IntegerField(db_column=\"CAIXA_UNICA\", blank=True, null=True)\nrevenda_vgr = models.IntegerField(db_column=\"REVENDA_VGR\", blank=True, null=True)\nmodelo_atributos = models.CharField(db_column=\"MODELO_ATRIBUTOS\", max_length=250, db_collation=\"Latin1_General_CI_AS\", blank=True, null=True)\nprojeto_especial = models.CharField(db_column=\"PROJETO_ESPECIAL\", max_length=20, db_collation=\"Latin1_General_CI_AS\", blank=True, null=True)\ndelta_rec_liq = models.FloatField(db_column=\"DELTA_REC_LIQ\", blank=True, null=True)\n</code></pre> - Campos detalhados de planta VGR, incluindo cliente, grupo, datas, valores, etc.</p>"},{"location":"dw_analytics/models/todas_as_models.html#fsaelocalidades","title":"<code>FSaeLocalidades</code>","text":"<p><pre><code>class FSaeLocalidades(models.Model):\nid_vantive = models.IntegerField(db_column=\"ID_VANTIVE\", blank=True, null=True)\nuf = models.CharField(db_column=\"UF\", max_length=20, db_collation=\"Latin1_General_CI_AS\", blank=True, null=True)\ncidade = models.CharField(db_column=\"CIDADE\", max_length=100, db_collation=\"Latin1_General_CI_AS\", blank=True, null=True)\ndata_rfb = models.DateField(db_column=\"DATA_RFB\", blank=True, null=True)\n</code></pre> - Campos de localidades SAE, como cidade, UF, data, etc.</p>"},{"location":"dw_analytics/models/todas_as_models.html#__init__py-das-models","title":"<code>__init__.py</code> das models","text":"<p>O arquivo <code>__init__.py</code> importa todas as models do diret\u00f3rio, facilitando o import em outros m\u00f3dulos:</p> <pre><code>from .d_assignment_group import DAssignmentGroup\nfrom .d_company import DCompany\nfrom .d_contract import DContract\nfrom .d_operacao import DOperacao\nfrom .d_premissas import DPremissas\nfrom .d_resolved_by import DResolvedBy\nfrom .d_resolved_by_assignment_group import DResolvedByAssignmentGroup\nfrom .d_sorted_ticket import DSortedTicket\nfrom .f_incident import FIncident\nfrom .f_incident_bita import FIncidentsBita\nfrom .f_incident_task import FIncidentTask\nfrom .f_planta_vgr import FPlantaVgr\nfrom .f_sae_localidades import FSaeLocalidades\n</code></pre>"},{"location":"dw_analytics/models/todas_as_models.html#como-importar-novas-models","title":"Como importar novas models","text":"<ol> <li>Crie o novo arquivo de model (ex: <code>nova_model.py</code>).</li> <li>Importe a nova model no <code>__init__.py</code>:     <pre><code>from .nova_model import NovaModel\n</code></pre></li> <li>Agora, em qualquer lugar do projeto, basta importar:     <pre><code>from dw_analytics.models import NovaModel\n</code></pre></li> </ol> <p>Isso mant\u00e9m o c\u00f3digo organizado e facilita a manuten\u00e7\u00e3o e o uso das models em views, serializers, tasks, etc.</p>"},{"location":"power_bi/index.html","title":"Power BI","text":""},{"location":"power_bi/index.html#visao-geral","title":"Vis\u00e3o Geral","text":"<p>O app power_bi \u00e9 respons\u00e1vel pela integra\u00e7\u00e3o, transforma\u00e7\u00e3o e exposi\u00e7\u00e3o de dados para an\u00e1lises e relat\u00f3rios no Power BI, al\u00e9m de fornecer APIs para manipula\u00e7\u00e3o e consulta de dados espec\u00edficos desse contexto.</p>"},{"location":"power_bi/index.html#principais-responsabilidades","title":"Principais responsabilidades:","text":"<ul> <li>Modelagem de dados para integra\u00e7\u00e3o com Power BI</li> <li>Exposi\u00e7\u00e3o de dados via API REST</li> <li>Processamento e transforma\u00e7\u00e3o de dados para relat\u00f3rios</li> <li>Suporte a pipelines de ETL e tarefas automatizadas</li> </ul>"},{"location":"power_bi/index.html#estrutura-da-documentacao","title":"Estrutura da Documenta\u00e7\u00e3o","text":"<ul> <li><code>api/</code>: Documenta\u00e7\u00e3o das APIs, views e serializers.</li> <li><code>models/</code>: Documenta\u00e7\u00e3o dos modelos de dados.</li> <li><code>migrations/</code>: Detalhes sobre as migra\u00e7\u00f5es e estrutura do banco.</li> </ul> <p>Consulte cada se\u00e7\u00e3o para detalhes de uso, exemplos e explica\u00e7\u00f5es t\u00e9cnicas.</p>"},{"location":"power_bi/api/index.html","title":"API Power BI","text":"<p>Documenta\u00e7\u00e3o das views, serializers e endpoints REST do app power_bi.</p> <ul> <li><code>views/</code>: Documenta\u00e7\u00e3o das views e viewsets.</li> <li><code>serializers/</code>: Documenta\u00e7\u00e3o dos serializers utilizados.</li> <li><code>urls.md</code>: Rotas e exemplos de endpoints.</li> </ul>"},{"location":"power_bi/api/urls.html","title":"API - URLs","text":"<p>Este arquivo documenta as rotas principais expostas pelo app power_bi.</p>"},{"location":"power_bi/api/urls.html#exemplo-de-registro-de-rota-com-router-drf","title":"Exemplo de registro de rota com router DRF","text":"<pre><code>from rest_framework.routers import DefaultRouter\nfrom .views import SolarInterfacesVGR, SolarIDVGRInterfaceVGRCorrigido, LoadInterfaceNewIDVGR\nrouter = DefaultRouter()\nrouter.register(\n\"solar-interfaces-vgr\",\nviewset=SolarInterfacesVGR,\nbasename=\"solar-new-id\",\n)\nrouter.register(\n\"solar-id-vgr-interface-vgr-corrigido\",\nviewset=SolarIDVGRInterfaceVGRCorrigido,\nbasename=\"solar-new-id\",\n)\nurlpatterns = [\npath(\n\"load-interface-new-id-vgr/\",\nview=LoadInterfaceNewIDVGR.as_view(),\nname=\"interfaces-new\",\n),\n]\nurlpatterns += router.urls\n</code></pre> <ul> <li>Cada rota registrada exp\u00f5e um endpoint RESTful para o recurso correspondente.</li> <li>Para adicionar novas rotas, registre novos viewsets no router.</li> </ul>"},{"location":"power_bi/api/serializers/index.html","title":"Serializers","text":""},{"location":"power_bi/api/serializers/index.html#o-que-sao-serializers","title":"O que s\u00e3o serializers?","text":"<p>Serializers no app power_bi s\u00e3o respons\u00e1veis por converter modelos Django em JSON para APIs REST e vice-versa, al\u00e9m de permitir valida\u00e7\u00e3o e customiza\u00e7\u00e3o dos dados expostos.</p>"},{"location":"power_bi/api/serializers/index.html#para-que-servem","title":"Para que servem?","text":"<ul> <li>Serializar: Transformar objetos do banco de dados em JSON para resposta de API.</li> <li>Desserializar: Validar e transformar dados recebidos (JSON) em objetos Python/modelos.</li> <li>Valida\u00e7\u00e3o: Garantir que os dados recebidos est\u00e3o corretos antes de salvar no banco.</li> </ul>"},{"location":"power_bi/api/serializers/index.html#exemplo-basico-de-utilizacao","title":"Exemplo b\u00e1sico de utiliza\u00e7\u00e3o","text":"<pre><code>from rest_framework import serializers\nfrom ...models import TblSolarInterfacesVgr\nclass SolarInterfacesVgrSerializer(serializers.ModelSerializer):\nclass Meta:\nmodel = TblSolarInterfacesVgr\nfields = \"__all__\"\n</code></pre> <ul> <li>O serializer acima converte todos os campos do modelo <code>TblSolarInterfacesVgr</code> para JSON e valida dados recebidos para cria\u00e7\u00e3o/atualiza\u00e7\u00e3o.</li> </ul>"},{"location":"power_bi/api/serializers/index.html#exemplos-avancados","title":"Exemplos avan\u00e7ados","text":"<ul> <li>Voc\u00ea pode criar serializers que retornam apenas campos espec\u00edficos, campos calculados ou fazem valida\u00e7\u00e3o customizada, assim como mostrado na documenta\u00e7\u00e3o do DW Analytics.</li> </ul>"},{"location":"power_bi/api/serializers/index.html#como-usar","title":"Como usar","text":"<ul> <li>Crie um serializer para cada modelo que ser\u00e1 exposto via API.</li> <li>Use o serializer nas views para transformar dados de entrada e sa\u00edda.</li> <li>Pode customizar m\u00e9todos de valida\u00e7\u00e3o ou campos conforme necess\u00e1rio.</li> </ul> <p>Consulte os arquivos individuais para detalhes de cada serializer.</p>"},{"location":"power_bi/api/serializers/solar_new_id_serializer.html","title":"<code>solar_new_id_serializer.py</code>","text":""},{"location":"power_bi/api/serializers/solar_new_id_serializer.html#o-que-e","title":"O que \u00e9?","text":"<p>Arquivo que define o serializer respons\u00e1vel por converter o modelo <code>TblSolarInterfacesVgr</code> para JSON e validar dados recebidos via API.</p>"},{"location":"power_bi/api/serializers/solar_new_id_serializer.html#codigo-explicado-ponto-a-ponto","title":"C\u00f3digo explicado ponto a ponto","text":"<p><pre><code>from rest_framework import serializers\nfrom ...models import TblSolarInterfacesVgr\nclass SolarInterfacesVgrSerializer(serializers.ModelSerializer):\nclass Meta:\nmodel = TblSolarInterfacesVgr\nfields = \"__all__\"  # Retorna todos os campos do model\n</code></pre> - Importa o m\u00f3dulo de serializers do DRF. - Importa o modelo <code>TblSolarInterfacesVgr</code> que ser\u00e1 serializado. - Define a classe <code>SolarInterfacesVgrSerializer</code>, herdando de <code>ModelSerializer</code> (serializa\u00e7\u00e3o autom\u00e1tica baseada no modelo). - <code>model = TblSolarInterfacesVgr</code>: Indica qual modelo ser\u00e1 serializado. - <code>fields = \"__all__\"</code>: Inclui todos os campos do modelo na serializa\u00e7\u00e3o.</p>"},{"location":"power_bi/api/serializers/solar_new_id_serializer.html#funcionamento-esperado","title":"Funcionamento esperado","text":"<ul> <li>Ao usar este serializer em uma view, todos os campos do modelo ser\u00e3o convertidos para JSON automaticamente.</li> <li>Ao receber dados para cria\u00e7\u00e3o/atualiza\u00e7\u00e3o, o serializer valida e converte para o modelo Django.</li> </ul>"},{"location":"power_bi/api/serializers/solar_new_id_serializer.html#o-que-pode-e-nao-pode-alterar","title":"O que pode e n\u00e3o pode alterar","text":"<ul> <li>Pode: Customizar campos, adicionar valida\u00e7\u00f5es extras, sobrescrever m\u00e9todos de valida\u00e7\u00e3o.</li> <li>N\u00e3o pode: Remover a heran\u00e7a de <code>ModelSerializer</code> se quiser manter a serializa\u00e7\u00e3o autom\u00e1tica baseada no modelo.</li> </ul>"},{"location":"power_bi/api/views/index.html","title":"Views","text":""},{"location":"power_bi/api/views/index.html#o-que-sao-views-no-app-power_bi","title":"O que s\u00e3o views no app power_bi?","text":"<p>Views s\u00e3o respons\u00e1veis por receber requisi\u00e7\u00f5es HTTP, processar dados (consultar banco, aplicar regras de neg\u00f3cio, transformar dados para o Power BI, etc.) e retornar respostas HTTP (geralmente JSON).</p> <ul> <li>No contexto do power_bi, as views normalmente herdam de <code>ModelViewSet</code> do Django REST Framework para expor opera\u00e7\u00f5es CRUD ou de classes customizadas para tarefas espec\u00edficas.</li> </ul>"},{"location":"power_bi/api/views/index.html#estrutura-basica-de-uma-view","title":"Estrutura b\u00e1sica de uma view","text":"<pre><code>from rest_framework.viewsets import ModelViewSet\nfrom ...models import TblSolarInterfacesVgr\nfrom ..serializers import SolarInterfacesVgrSerializer\nclass SolarInterfacesVGR(ModelViewSet):\nserializer_class = SolarInterfacesVgrSerializer\nqueryset = TblSolarInterfacesVgr.objects.using(\"power_bi\").all()\n</code></pre>"},{"location":"power_bi/api/views/index.html#como-usar-e-importar-views","title":"Como usar e importar views","text":"<ul> <li>Importe as views no <code>__init__.py</code> da pasta <code>views</code> para facilitar o uso em outros arquivos, como o de rotas (<code>urls.py</code>).</li> <li>Exemplo:   <pre><code>from .solar_interfaces_vgr import SolarInterfacesVGR\n</code></pre></li> </ul>"},{"location":"power_bi/api/views/index.html#funcionamento-esperado","title":"Funcionamento esperado","text":"<ul> <li>Cada viewset exp\u00f5e endpoints RESTful para listar, criar, atualizar e deletar registros dos modelos do Power BI.</li> <li>As views podem ser customizadas para processar dados antes de retornar para o frontend ou Power BI.</li> </ul> <p>Consulte os arquivos individuais para detalhes de cada view.</p>"},{"location":"power_bi/api/views/load_interfaces_new_id.html","title":"<code>load_interfaces_new_id.py</code>","text":""},{"location":"power_bi/api/views/load_interfaces_new_id.html#o-que-e","title":"O que \u00e9?","text":"<p>Arquivo que define a view respons\u00e1vel por acionar a task de constru\u00e7\u00e3o da base consolidada de interfaces no app power_bi.</p>"},{"location":"power_bi/api/views/load_interfaces_new_id.html#codigo-explicado-ponto-a-ponto","title":"C\u00f3digo explicado ponto a ponto","text":"<p><pre><code>from rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom ...tasks import LoadInterfaceNewID\n</code></pre> - Importa a <code>APIView</code> do DRF para criar uma view baseada em classe. - Importa o <code>Response</code> para retornar respostas HTTP. - Importa a task <code>LoadInterfaceNewID</code> respons\u00e1vel pelo processamento dos dados.</p> <p><pre><code>class LoadInterfaceNewIDVGR(APIView):\n\"\"\"View que aciona a task de constru\u00e7\u00e3o da base de [Consolidacao]\"\"\"\ndef post(self, request, *args, **kwargs) -&gt; Response:\nfiltros = {\n\"company_remedy_list\": request.data.get(\"company_remedy\", []),\n\"nome_do_cliente_list\": request.data.get(\"nome_do_cliente\", []),\n}\nwith LoadInterfaceNewID(**filtros) as load:\nlog = load.run()\nreturn Response(log)\n</code></pre> - Define a classe <code>LoadInterfaceNewIDVGR</code>, herdando de <code>APIView</code>. - O m\u00e9todo <code>post</code> recebe dados do request, monta filtros e executa a task <code>LoadInterfaceNewID</code> usando um context manager. - Retorna o log do processamento como resposta.</p>"},{"location":"power_bi/api/views/load_interfaces_new_id.html#funcionamento-esperado","title":"Funcionamento esperado","text":"<ul> <li>Ao receber uma requisi\u00e7\u00e3o POST, executa a pipeline de carga e transforma\u00e7\u00e3o de dados.</li> <li>Retorna um log detalhado da execu\u00e7\u00e3o.</li> </ul>"},{"location":"power_bi/api/views/load_interfaces_new_id.html#o-que-pode-e-nao-pode-alterar","title":"O que pode e n\u00e3o pode alterar","text":"<ul> <li>Pode: Customizar os filtros, adicionar valida\u00e7\u00f5es, alterar o retorno.</li> <li>N\u00e3o pode: Remover a chamada da task se quiser manter o processamento automatizado.</li> </ul>"},{"location":"power_bi/api/views/solar_id_vgr_interface_vgr_corrigido_viewset.html","title":"<code>solar_id_vgr_interface_vgr_corrigido_viewset.py</code>","text":""},{"location":"power_bi/api/views/solar_id_vgr_interface_vgr_corrigido_viewset.html#o-que-e","title":"O que \u00e9?","text":"<p>Arquivo que define o viewset respons\u00e1vel por expor a API para o modelo <code>SolarIDVGRInterfaceCorrigido</code> do app power_bi.</p>"},{"location":"power_bi/api/views/solar_id_vgr_interface_vgr_corrigido_viewset.html#codigo-explicado-ponto-a-ponto","title":"C\u00f3digo explicado ponto a ponto","text":"<p><pre><code>from rest_framework.viewsets import ModelViewSet\n</code></pre> - Importa o <code>ModelViewSet</code> do Django REST Framework, que j\u00e1 implementa todas as opera\u00e7\u00f5es CRUD.</p> <p><pre><code>from app.utils.paginators import CustomLargePagination\n</code></pre> - Importa um paginador customizado.</p> <p><pre><code>from ...models import SolarIDVGRInterfaceCorrigido\nfrom ..serializers import SolarInterfacesVgrSerializer\n</code></pre> - Importa o modelo <code>SolarIDVGRInterfaceCorrigido</code>. - Importa o serializer, respons\u00e1vel por converter o modelo em JSON para a API.</p> <p><pre><code>class SolarIDVGRInterfaceVGRCorrigido(ModelViewSet):\nserializer_class = SolarInterfacesVgrSerializer\nqueryset = SolarIDVGRInterfaceCorrigido.objects.using(\"power_bi\").all()\npagination_class = CustomLargePagination\n</code></pre> - Define a classe <code>SolarIDVGRInterfaceVGRCorrigido</code>, herdando de <code>ModelViewSet</code>. - <code>serializer_class</code>: Indica qual serializer ser\u00e1 usado. - <code>queryset</code>: Define o conjunto de dados exposto pela API, usando o banco correto. - <code>pagination_class</code>: Define o paginador.</p>"},{"location":"power_bi/api/views/solar_id_vgr_interface_vgr_corrigido_viewset.html#funcionamento-esperado","title":"Funcionamento esperado","text":"<ul> <li>A view exp\u00f5e endpoints RESTful para listar, criar, atualizar e deletar registros de <code>SolarIDVGRInterfaceCorrigido</code>.</li> <li>As respostas s\u00e3o paginadas conforme definido em <code>CustomLargePagination</code>.</li> </ul>"},{"location":"power_bi/api/views/solar_id_vgr_interface_vgr_corrigido_viewset.html#o-que-pode-e-nao-pode-alterar","title":"O que pode e n\u00e3o pode alterar","text":"<ul> <li>Pode: Customizar o queryset, trocar o serializer, alterar o paginador, sobrescrever m\u00e9todos para l\u00f3gica customizada.</li> <li>N\u00e3o pode: Remover a heran\u00e7a de <code>ModelViewSet</code> se quiser manter as opera\u00e7\u00f5es CRUD autom\u00e1ticas.</li> </ul>"},{"location":"power_bi/api/views/solar_interfaces_vgr.html","title":"<code>solar_interfaces_vgr.py</code>","text":""},{"location":"power_bi/api/views/solar_interfaces_vgr.html#o-que-e","title":"O que \u00e9?","text":"<p>Arquivo que define o viewset respons\u00e1vel por expor a API para o modelo <code>TblSolarInterfacesVgr</code> do app power_bi.</p>"},{"location":"power_bi/api/views/solar_interfaces_vgr.html#codigo-explicado-ponto-a-ponto","title":"C\u00f3digo explicado ponto a ponto","text":"<p><pre><code>from rest_framework.viewsets import ModelViewSet\n</code></pre> - Importa o <code>ModelViewSet</code> do Django REST Framework, que j\u00e1 implementa todas as opera\u00e7\u00f5es CRUD (listar, criar, atualizar, deletar).</p> <p><pre><code>from app.utils.paginators import CustomLargePagination\n</code></pre> - Importa um paginador customizado, que define o tamanho das p\u00e1ginas e o formato da resposta paginada.</p> <p><pre><code>from ...models import TblSolarInterfacesVgr\nfrom ..serializers import SolarInterfacesVgrSerializer\n</code></pre> - Importa o modelo <code>TblSolarInterfacesVgr</code> (representa a tabela no banco de dados). - Importa o serializer, respons\u00e1vel por converter o modelo em JSON para a API.</p> <p><pre><code>class SolarInterfacesVGR(ModelViewSet):\nserializer_class = SolarInterfacesVgrSerializer\nqueryset = TblSolarInterfacesVgr.objects.using(\"power_bi\").all()\npagination_class = CustomLargePagination\n</code></pre> - Define a classe <code>SolarInterfacesVGR</code>, herdando de <code>ModelViewSet</code>. - <code>serializer_class</code>: Indica qual serializer ser\u00e1 usado para transformar os dados. - <code>queryset</code>: Define o conjunto de dados que ser\u00e1 exposto pela API. O m\u00e9todo <code>.using(\"power_bi\")</code> garante que a consulta ser\u00e1 feita no banco correto. - <code>pagination_class</code>: Define o paginador a ser usado para as respostas dessa view.</p>"},{"location":"power_bi/api/views/solar_interfaces_vgr.html#funcionamento-esperado","title":"Funcionamento esperado","text":"<ul> <li>A view exp\u00f5e endpoints RESTful para listar, criar, atualizar e deletar registros de <code>TblSolarInterfacesVgr</code>.</li> <li>As respostas s\u00e3o paginadas conforme definido em <code>CustomLargePagination</code>.</li> <li>O serializer garante que os dados estejam no formato correto para a API.</li> </ul>"},{"location":"power_bi/api/views/solar_interfaces_vgr.html#o-que-pode-e-nao-pode-alterar","title":"O que pode e n\u00e3o pode alterar","text":"<ul> <li>Pode: Customizar o queryset, trocar o serializer, alterar o paginador, sobrescrever m\u00e9todos para l\u00f3gica customizada.</li> <li>N\u00e3o pode: Remover a heran\u00e7a de <code>ModelViewSet</code> se quiser manter as opera\u00e7\u00f5es CRUD autom\u00e1ticas.</li> </ul>"},{"location":"power_bi/migrations/index.html","title":"Migrations","text":""},{"location":"power_bi/migrations/index.html#o-que-sao-migrations","title":"O que s\u00e3o migrations?","text":"<p>Migrations s\u00e3o arquivos gerados pelo Django que registram e controlam todas as altera\u00e7\u00f5es feitas na estrutura do banco de dados (schema) do app power_bi. Elas funcionam como um \"hist\u00f3rico versionado\" das tabelas, campos e relacionamentos do seu projeto.</p>"},{"location":"power_bi/migrations/index.html#para-que-servem","title":"Para que servem?","text":"<ul> <li>Criar tabelas e campos no banco de dados automaticamente.</li> <li>Alterar a estrutura existente (adicionar/remover campos, mudar tipos, criar \u00edndices, etc).</li> <li>Remover tabelas/campos que n\u00e3o s\u00e3o mais necess\u00e1rios.</li> <li>Sincronizar o c\u00f3digo Python dos modelos com o banco de dados real.</li> </ul>"},{"location":"power_bi/migrations/index.html#quando-fazer-uma-migration","title":"Quando fazer uma migration?","text":"<ul> <li>Sempre que voc\u00ea criar, alterar ou remover um modelo ou campo em qualquer arquivo <code>models.py</code> do app.</li> <li>Exemplo: adicionou um campo novo em um modelo? Rode <code>python manage.py makemigrations power_bi</code>.</li> </ul>"},{"location":"power_bi/migrations/index.html#como-funcionam","title":"Como funcionam?","text":"<ul> <li>O Django compara o estado atual dos modelos Python com o hist\u00f3rico de migrations j\u00e1 aplicadas.</li> <li>Gera um novo arquivo de migration descrevendo as mudan\u00e7as.</li> <li>Ao rodar <code>python manage.py migrate</code>, o Django executa as opera\u00e7\u00f5es no banco de dados conforme descrito nas migrations.</li> </ul>"},{"location":"power_bi/migrations/index.html#como-entender-o-codigo-de-uma-migration","title":"Como entender o c\u00f3digo de uma migration?","text":"<ul> <li>Cada migration \u00e9 uma classe com uma lista de opera\u00e7\u00f5es (<code>operations = [...]</code>).</li> <li>Exemplos de opera\u00e7\u00f5es:</li> <li><code>CreateModel</code>: Cria uma nova tabela/modelo.</li> <li><code>AddField</code>: Adiciona um campo a uma tabela existente.</li> <li><code>AlterField</code>: Altera o tipo ou op\u00e7\u00f5es de um campo.</li> <li><code>RemoveField</code>: Remove um campo de uma tabela.</li> <li><code>DeleteModel</code>: Remove uma tabela/modelo.</li> <li><code>RenameField</code>: Renomeia um campo existente.</li> </ul> <p>Exemplo: <pre><code>from django.db import migrations, models\nclass Migration(migrations.Migration):\noperations = [\nmigrations.CreateModel(\nname='MinhaTabela',\nfields=[\n('id', models.AutoField(primary_key=True)),\n('nome', models.CharField(max_length=100)),\n],\n),\nmigrations.AddField(\nmodel_name='outratabela',\nname='novo_campo',\nfield=models.IntegerField(null=True),\n),\nmigrations.AlterField(\nmodel_name='outratabela',\nname='campo_existente',\nfield=models.CharField(max_length=200),\n),\nmigrations.RemoveField(\nmodel_name='outratabela',\nname='campo_antigo',\n),\nmigrations.DeleteModel(\nname='TabelaAntiga',\n),\nmigrations.RenameField(\nmodel_name='minhatabela',\nold_name='nome_antigo',\nnew_name='nome_novo',\n),\n]\n</code></pre></p>"},{"location":"power_bi/migrations/index.html#boas-praticas","title":"Boas pr\u00e1ticas","text":"<ul> <li>Sempre fa\u00e7a commit dos arquivos de migration junto com as altera\u00e7\u00f5es nos modelos.</li> <li>N\u00e3o edite migrations antigas manualmente (exceto em casos muito espec\u00edficos e com cuidado).</li> <li>Use <code>makemigrations</code> para gerar e <code>migrate</code> para aplicar as mudan\u00e7as.</li> <li>Mantenha o hist\u00f3rico de migrations para facilitar rollback e auditoria.</li> </ul> <p>Consulte os arquivos individuais para detalhes de cada migration.</p>"},{"location":"power_bi/models/index.html","title":"Modelos Power BI","text":""},{"location":"power_bi/models/index.html#o-que-sao-models-no-django","title":"O que s\u00e3o models no Django?","text":"<p>Models s\u00e3o classes Python que representam tabelas do banco de dados. Cada atributo da classe corresponde a uma coluna da tabela, e cada inst\u00e2ncia da classe representa uma linha (registro) da tabela.</p>"},{"location":"power_bi/models/index.html#paralelo-com-sql","title":"Paralelo com SQL","text":"<ul> <li>Model Django = Tabela SQL</li> <li>Campo do model = Coluna da tabela</li> <li>Inst\u00e2ncia do model = Linha/registro da tabela</li> </ul> <p>Exemplo: <pre><code>class Interface(models.Model):\nnome = models.CharField(max_length=100)\nvelocidade = models.CharField(max_length=50)\n</code></pre> Equivalente em SQL: <pre><code>CREATE TABLE interface (\nid SERIAL PRIMARY KEY,\nnome VARCHAR(100),\nvelocidade VARCHAR(50)\n);\n</code></pre></p>"},{"location":"power_bi/models/index.html#tipos-de-dados-em-models-django","title":"Tipos de dados em models Django","text":"<p>Veja a p\u00e1gina Tipos de Dados em Models Django para uma explica\u00e7\u00e3o detalhada dos tipos de campos dispon\u00edveis, exemplos de uso e paralelos com SQL.</p>"},{"location":"power_bi/models/index.html#para-que-servem","title":"Para que servem?","text":"<ul> <li>Definir a estrutura dos dados do seu sistema.</li> <li>Permitir que o Django crie, altere e remova tabelas automaticamente via migrations.</li> <li>Facilitar consultas, inser\u00e7\u00f5es, atualiza\u00e7\u00f5es e dele\u00e7\u00f5es usando Python, sem escrever SQL manualmente.</li> </ul>"},{"location":"power_bi/models/index.html#como-o-django-trabalha-com-models","title":"Como o Django trabalha com models","text":"<ul> <li>O Django converte cada model em uma tabela no banco de dados.</li> <li>Usa as models para gerar formul\u00e1rios, serializers, admin, etc.</li> <li>Permite consultar e manipular dados usando a ORM (Object-Relational Mapping).</li> </ul> <p>Exemplo de consulta: <pre><code>interfaces = Interface.objects.filter(velocidade=\"100Mbps\")\n</code></pre> Equivalente em SQL: <pre><code>SELECT * FROM interface WHERE velocidade = '100Mbps';\n</code></pre></p>"},{"location":"power_bi/models/index.html#como-usar-models-em-views-ou-pipelines-tasks","title":"Como usar models em views ou pipelines (tasks)","text":"<ul> <li>Em views, voc\u00ea pode consultar, criar ou atualizar registros usando a model:     <pre><code>from .models import TblSolarInterfacesVgr\ndef listar_interfaces(request):\ninterfaces = TblSolarInterfacesVgr.objects.filter(uf=\"SP\")\n# ...retornar resposta...\n</code></pre></li> <li>Em pipelines/tasks, use as models para ler ou gravar dados durante o processamento:     <pre><code>from .models import SolarIDVGRInterfaceCorrigido\ndef processar_interfaces():\nfor interface in SolarIDVGRInterfaceCorrigido.objects.all():\n# ...processamento...\n</code></pre></li> </ul>"},{"location":"power_bi/models/index.html#como-criar-um-model","title":"Como criar um model","text":"<ol> <li>Crie uma classe que herda de <code>models.Model</code>:     <pre><code>from django.db import models\nclass NovaTabela(models.Model):\ncampo1 = models.CharField(max_length=100)\ncampo2 = models.IntegerField()\n</code></pre></li> <li>Adicione o model ao arquivo <code>models/__init__.py</code> para facilitar os imports:     <pre><code>from .nova_tabela import NovaTabela\n</code></pre></li> <li>Rode <code>python manage.py makemigrations</code> e <code>python manage.py migrate</code> para criar a tabela no banco.</li> </ol>"},{"location":"power_bi/models/index.html#boas-praticas-e-pontos-importantes","title":"Boas pr\u00e1ticas e pontos importantes","text":"<ul> <li>Sempre defina o campo <code>Meta: db_table</code> se quiser controlar o nome da tabela no banco.</li> <li>Use <code>app_label</code> em projetos multi-app para garantir que o Django reconhe\u00e7a o app correto.</li> <li>Prefira nomes de campos e tabelas em ingl\u00eas para projetos internacionais, mas siga o padr\u00e3o do projeto.</li> <li>Utilize m\u00e9todos customizados no model para regras de neg\u00f3cio relacionadas \u00e0quela tabela.</li> <li>Models podem ter relacionamentos (<code>ForeignKey</code>, <code>ManyToManyField</code>, etc.), representando chaves estrangeiras e tabelas de associa\u00e7\u00e3o no SQL.</li> </ul>"},{"location":"power_bi/models/index.html#resumo","title":"Resumo","text":"<ul> <li>Models s\u00e3o a base do mapeamento entre Python e SQL no Django.</li> <li>Permitem manipular dados do banco de forma orientada a objetos.</li> <li>S\u00e3o essenciais para views, serializers, pipelines e qualquer l\u00f3gica de dados do projeto.</li> </ul> <p>Consulte os arquivos individuais para detalhes de cada modelo.</p>"},{"location":"power_bi/models/todas_as_models.html","title":"Documenta\u00e7\u00e3o das Models do app <code>power_bi</code>","text":"<p>Este documento detalha cada model do app, explicando campos, tipos, relacionamentos e finalidade.</p>"},{"location":"power_bi/models/todas_as_models.html#tblsolarinterfacesvgr","title":"<code>TblSolarInterfacesVgr</code>","text":"<p><pre><code>class TblSolarInterfacesVgr(models.Model):\nid = models.AutoField(db_column=\"ID\", primary_key=True)\ncompany_remedy = models.CharField(db_column=\"Company_Remedy\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nnome_do_cliente = models.CharField(db_column=\"Nome_do_cliente\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nrazao_social = models.CharField(db_column=\"RAZAO_SOCIAL\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\ngrupo_corporativo = models.CharField(db_column=\"GRUPO_CORPORATIVO\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nid_vgr = models.CharField(db_column=\"ID_VGR\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\ndesignador = models.CharField(db_column=\"DESIGNADOR\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\noperadora = models.CharField(db_column=\"Operadora\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\ntecnologia = models.CharField(db_column=\"Tecnologia\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nmunicipio = models.CharField(db_column=\"MUNIC\u00cdPIO\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nuf = models.CharField(db_column=\"UF\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nvelocidade = models.CharField(db_column=\"VELOCIDADE\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nstatus_vantive = models.CharField(db_column=\"STATUS_VANTIVE\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\ninterfaceid = models.CharField(db_column=\"INTERFACEID\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nid_vantive_principal = models.CharField(db_column=\"ID_VANTIVE_PRINCIPAL\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nip_interface = models.CharField(db_column=\"IP_Interface\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nip_node = models.CharField(db_column=\"IP_Node\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\noperadora2 = models.CharField(db_column=\"OPERADORA2\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\noperadora3 = models.CharField(db_column=\"OPERADORA3\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\n</code></pre> - id: Identificador \u00fanico da interface. - company_remedy: Nome da empresa Remedy. - nome_do_cliente: Nome do cliente. - razao_social: Raz\u00e3o social do cliente. - grupo_corporativo: Grupo corporativo do cliente. - id_vgr: Identificador VGR. - designador: Designador da interface. - operadora: Nome da operadora. - tecnologia: Tecnologia utilizada. - municipio: Munic\u00edpio da interface. - uf: Unidade federativa. - velocidade: Velocidade contratada. - status_vantive: Status no sistema Vantive. - interfaceid: Identificador da interface. - id_vantive_principal: ID principal no Vantive. - ip_interface: IP da interface. - ip_node: IP do n\u00f3. - operadora2 / operadora3: Operadoras adicionais.</p>"},{"location":"power_bi/models/todas_as_models.html#solaridvgrinterfacecorrigido","title":"<code>SolarIDVGRInterfaceCorrigido</code>","text":"<p><pre><code>class SolarIDVGRInterfaceCorrigido(models.Model):\nid = models.AutoField(db_column=\"id\", primary_key=True)\ncompany_remedy = models.CharField(db_column=\"company_remedy\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nnome_do_cliente = models.CharField(db_column=\"nome_do_cliente\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nrazao_social = models.CharField(db_column=\"razao_social\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\ngrupo_corporativo = models.CharField(db_column=\"grupo_corporativo\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nid_vgr = models.CharField(db_column=\"id_vgr\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\ndesignador = models.CharField(db_column=\"designador\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\noperadora = models.CharField(db_column=\"operadora\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\ntecnologia = models.CharField(db_column=\"tecnologia\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nmunicipio = models.CharField(db_column=\"municipio\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nuf = models.CharField(db_column=\"uf\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nvelocidade = models.CharField(db_column=\"velocidade\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nstatus_vantive = models.CharField(db_column=\"status_vantive\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\ninterfaceid = models.CharField(db_column=\"interfaceid\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nid_vantive_principal = models.CharField(db_column=\"id_vantive_principal\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nip_interface = models.CharField(db_column=\"ip_interface\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nip_node = models.CharField(db_column=\"ip_node\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\noperadora2 = models.CharField(db_column=\"operadora2\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\noperadora3 = models.CharField(db_column=\"operadora3\", max_length=255, db_collation=\"SQL_Latin1_General_CP1_CI_AS\", blank=True, null=True)\nhistorico_ids = models.JSONField(default=list, db_column=\"historico_ids\")\n</code></pre> - id: Identificador \u00fanico da interface corrigida. - company_remedy: Nome da empresa Remedy. - nome_do_cliente: Nome do cliente. - razao_social: Raz\u00e3o social do cliente. - grupo_corporativo: Grupo corporativo do cliente. - id_vgr: Identificador VGR. - designador: Designador da interface. - operadora: Nome da operadora. - tecnologia: Tecnologia utilizada. - municipio: Munic\u00edpio da interface. - uf: Unidade federativa. - velocidade: Velocidade contratada. - status_vantive: Status no sistema Vantive. - interfaceid: Identificador da interface. - id_vantive_principal: ID principal no Vantive. - ip_interface: IP da interface. - ip_node: IP do n\u00f3. - operadora2 / operadora3: Operadoras adicionais. - historico_ids: Lista de IDs hist\u00f3ricos relacionados \u00e0 interface (campo JSON).</p>"},{"location":"power_bi/models/todas_as_models.html#__init__py-das-models","title":"<code>__init__.py</code> das models","text":"<p>O arquivo <code>__init__.py</code> importa todas as models do diret\u00f3rio, facilitando o import em outros m\u00f3dulos:</p> <pre><code>from .solar_id_vgr_interface_vgr_corrigido import SolarIDVGRInterfaceCorrigido\nfrom .tbl_solar_interfaces_vgr import TblSolarInterfacesVgr\n</code></pre>"},{"location":"power_bi/models/todas_as_models.html#como-importar-novas-models","title":"Como importar novas models","text":"<ol> <li>Crie o novo arquivo de model (ex: <code>nova_model.py</code>).</li> <li>Importe a nova model no <code>__init__.py</code>:     <pre><code>from .nova_model import NovaModel\n</code></pre></li> <li>Agora, em qualquer lugar do projeto, basta importar:     <pre><code>from power_bi.models import NovaModel\n</code></pre></li> </ol> <p>Isso mant\u00e9m o c\u00f3digo organizado e facilita a manuten\u00e7\u00e3o e o uso das models em views, serializers, tasks, etc.</p>"},{"location":"power_bi/tasks/index.html","title":"Tasks do app power_bi","text":""},{"location":"power_bi/tasks/index.html#o-que-sao-tasks","title":"O que s\u00e3o tasks?","text":"<p>Tasks s\u00e3o classes ou fun\u00e7\u00f5es respons\u00e1veis por processar grandes volumes de dados, executar rotinas de ETL (Extract, Transform, Load), integra\u00e7\u00f5es ou cargas automatizadas. No contexto do Django, podem ser usadas em pipelines, comandos customizados ou integradas com Celery para execu\u00e7\u00e3o ass\u00edncrona.</p>"},{"location":"power_bi/tasks/index.html#como-funcionam-as-tasks-no-power_bi","title":"Como funcionam as tasks no power_bi?","text":"<ul> <li>Utilizam a classe base <code>Pipeline</code> para padronizar logs e execu\u00e7\u00e3o.</li> <li>Podem ser usadas como context manager (<code>with</code>) para garantir logs mesmo em caso de erro.</li> <li>Executam extra\u00e7\u00e3o, transforma\u00e7\u00e3o e carga de dados entre diferentes modelos/tabelas.</li> <li>Podem ser chamadas por views, comandos de management ou agendadas via Celery.</li> </ul>"},{"location":"power_bi/tasks/index.html#exemplo-de-uso","title":"Exemplo de uso","text":"<pre><code>from power_bi.tasks import LoadInterfaceNewID\nwith LoadInterfaceNewID(company_remedy_list=[...], nome_do_cliente_list=[...]) as task:\nlog = task.run()\nprint(log)\n</code></pre>"},{"location":"power_bi/tasks/index.html#funcionamento-esperado","title":"Funcionamento esperado","text":"<ul> <li>A task executa todas as etapas de ETL e retorna um log detalhado da execu\u00e7\u00e3o.</li> <li>Pode ser facilmente integrada a endpoints de API ou rotinas agendadas.</li> </ul> <p>Consulte os arquivos individuais para detalhes de cada task.</p>"},{"location":"power_bi/tasks/load_interface_new_id.html","title":"<code>load_interface_new_id.py</code>","text":""},{"location":"power_bi/tasks/load_interface_new_id.html#o-que-e","title":"O que \u00e9?","text":"<p>Arquivo que define a task <code>LoadInterfaceNewID</code>, respons\u00e1vel por extrair, transformar e carregar dados de interfaces do Solar para a base consolidada, al\u00e9m de manter logs detalhados do processo.</p>"},{"location":"power_bi/tasks/load_interface_new_id.html#estrutura-geral-do-arquivo","title":"Estrutura geral do arquivo","text":""},{"location":"power_bi/tasks/load_interface_new_id.html#imports","title":"Imports","text":"<p><pre><code>from functools import cached_property\nimport polars as pl\nfrom django.db import connection, models, transaction\nfrom django.utils.functional import cached_property\nfrom app.utils.pipeline import Pipeline\nfrom ..models import SolarIDVGRInterfaceCorrigido, TblSolarInterfacesVgr\nfrom ..utils.mixin import MixinViews\n</code></pre> - Importa fun\u00e7\u00f5es utilit\u00e1rias, biblioteca de DataFrame (<code>polars</code>), recursos do Django para banco de dados e transa\u00e7\u00f5es, pipeline base, models e mixins de utilidades.</p>"},{"location":"power_bi/tasks/load_interface_new_id.html#classe-principal-loadinterfacenewid","title":"Classe principal: <code>LoadInterfaceNewID</code>","text":"<p><pre><code>class LoadInterfaceNewID(MixinViews, Pipeline):\n\"\"\"Extrai, transforma e carrega os dados de Receita Consolidados.\"\"\"\n# ...existing code...\n</code></pre> - Herda de <code>MixinViews</code> (m\u00e9todos utilit\u00e1rios para manipula\u00e7\u00e3o de dados) e <code>Pipeline</code> (padroniza\u00e7\u00e3o de logs e execu\u00e7\u00e3o). - Centraliza toda a l\u00f3gica de ETL (Extract, Transform, Load) para interfaces Solar.</p>"},{"location":"power_bi/tasks/load_interface_new_id.html#principais-metodos-e-propriedades","title":"Principais m\u00e9todos e propriedades","text":"<ul> <li><code>__init__</code>: Recebe listas de filtros via kwargs para limitar o escopo dos dados processados.</li> <li><code>_get_solar_interface_vgr_queryset</code>: Retorna o queryset filtrado do modelo <code>TblSolarInterfacesVgr</code>.</li> <li><code>_filtro</code>: Propriedade que monta o dicion\u00e1rio de filtros a partir dos par\u00e2metros recebidos.</li> <li><code>schema</code>: Propriedade que gera o schema do DataFrame a partir do modelo.</li> <li><code>solar_interface_dataset</code>: Propriedade que retorna um DataFrame Polars com os dados filtrados.</li> <li><code>run</code>: M\u00e9todo principal que executa as etapas de extra\u00e7\u00e3o, transforma\u00e7\u00e3o e carga, retornando o log.</li> <li><code>extract_transform_dataset</code>: Realiza a transforma\u00e7\u00e3o dos dados, incluindo a busca de IDs finais e hist\u00f3rico.</li> <li><code>get_final_id_vgr</code>: Busca recursivamente o ID final e mant\u00e9m um log de IDs hist\u00f3ricos.</li> <li><code>query_sae</code>: Executa uma query SQL para buscar o novo ID e status no banco externo.</li> <li><code>load</code>: Executa a carga dos dados, usando transa\u00e7\u00f5es para garantir atomicidade.</li> <li><code>_delete</code> e <code>_save</code>: M\u00e9todos auxiliares para deletar e inserir registros no banco de destino.</li> </ul>"},{"location":"power_bi/tasks/load_interface_new_id.html#exemplo-de-uso","title":"Exemplo de uso","text":"<p><pre><code>from power_bi.tasks import LoadInterfaceNewID\nwith LoadInterfaceNewID(company_remedy_list=[...], nome_do_cliente_list=[...]) as task:\nlog = task.run()\nprint(log)\n</code></pre> - O uso do context manager (<code>with</code>) garante que o log ser\u00e1 preenchido corretamente, mesmo em caso de erro.</p>"},{"location":"power_bi/tasks/load_interface_new_id.html#funcionamento-esperado","title":"Funcionamento esperado","text":"<ul> <li>Executa todas as etapas de ETL (extra\u00e7\u00e3o, transforma\u00e7\u00e3o, carga) e retorna um log detalhado.</li> <li>Pode ser chamada por views, comandos ou agendada via Celery.</li> <li>Permite f\u00e1cil customiza\u00e7\u00e3o dos filtros e l\u00f3gica de transforma\u00e7\u00e3o.</li> </ul>"},{"location":"power_bi/tasks/load_interface_new_id.html#explicacao-detalhada-dos-principais-pontos","title":"Explica\u00e7\u00e3o detalhada dos principais pontos","text":"<ul> <li>Filtros din\u00e2micos: Os filtros s\u00e3o passados via kwargs e aplicados ao queryset, permitindo processar apenas subconjuntos dos dados.</li> <li>Uso de Polars: O processamento dos dados \u00e9 feito em DataFrames Polars, que s\u00e3o mais r\u00e1pidos e eficientes para grandes volumes de dados.</li> <li>Busca de IDs finais: O m\u00e9todo <code>get_final_id_vgr</code> faz chamadas recursivas ao banco externo para encontrar o ID final e monta um hist\u00f3rico de todos os IDs percorridos.</li> <li>Carga transacional: O m\u00e9todo <code>load</code> usa <code>@transaction.atomic</code> para garantir que a dele\u00e7\u00e3o e inser\u00e7\u00e3o dos dados sejam at\u00f4micas, evitando inconsist\u00eancias.</li> <li>Log padronizado: Toda execu\u00e7\u00e3o gera um log com n\u00famero de registros inseridos/deletados, tempo de execu\u00e7\u00e3o e status.</li> </ul>"},{"location":"power_bi/tasks/load_interface_new_id.html#o-que-pode-e-nao-pode-alterar","title":"O que pode e n\u00e3o pode alterar","text":"<ul> <li>Pode: Customizar filtros, l\u00f3gica de transforma\u00e7\u00e3o, adicionar valida\u00e7\u00f5es, alterar o modelo de destino, modificar queries SQL conforme necessidade.</li> <li>N\u00e3o pode: Remover a heran\u00e7a de <code>Pipeline</code> se quiser manter logs padronizados e suporte a context manager. N\u00e3o remova o uso de transa\u00e7\u00f5es se quiser garantir atomicidade.</li> </ul>"},{"location":"power_bi/tasks/load_interface_new_id.html#integracao-com-views-e-apis","title":"Integra\u00e7\u00e3o com views e APIs","text":"<ul> <li>A task pode ser chamada diretamente por uma view (exemplo: <code>LoadInterfaceNewIDVGR</code>), permitindo que o processamento seja disparado por uma requisi\u00e7\u00e3o HTTP.</li> <li>O log retornado pode ser usado para monitoramento e auditoria do processo.</li> </ul> <p>Consulte o c\u00f3digo fonte para detalhes de implementa\u00e7\u00e3o de cada m\u00e9todo.</p>"},{"location":"power_bi/utils/mixin.html","title":"<code>mixin.py</code>","text":""},{"location":"power_bi/utils/mixin.html#o-que-e","title":"O que \u00e9?","text":"<p>Arquivo que define a classe <code>MixinViews</code>, um mixin utilit\u00e1rio para views e pipelines do app power_bi. Ele centraliza m\u00e9todos comuns para manipula\u00e7\u00e3o de datas, valida\u00e7\u00e3o, transforma\u00e7\u00e3o de dados e integra\u00e7\u00e3o entre Django ORM e DataFrames Polars.</p>"},{"location":"power_bi/utils/mixin.html#estrutura-geral-do-arquivo","title":"Estrutura geral do arquivo","text":""},{"location":"power_bi/utils/mixin.html#imports","title":"Imports","text":"<ul> <li><code>from datetime import datetime</code>: Para manipula\u00e7\u00e3o e valida\u00e7\u00e3o de datas.</li> <li><code>import polars as pl</code>: Para uso de DataFrames Polars, que s\u00e3o eficientes para processamento de dados em mem\u00f3ria.</li> <li><code>from django.db import models</code>: Para trabalhar com models do Django.</li> <li><code>from rest_framework.request import Request</code>, <code>from rest_framework.response import Response</code>: Para tipos do Django REST Framework em views.</li> </ul>"},{"location":"power_bi/utils/mixin.html#classe-principal-mixinviews","title":"Classe principal: <code>MixinViews</code>","text":"<p>A classe <code>MixinViews</code> \u00e9 um mixin, ou seja, uma classe utilit\u00e1ria para ser herdada por outras classes (views, pipelines, tasks) que precisam de m\u00e9todos comuns para manipula\u00e7\u00e3o de dados.</p>"},{"location":"power_bi/utils/mixin.html#metodos-detalhados","title":"M\u00e9todos detalhados","text":""},{"location":"power_bi/utils/mixin.html#1-getself-request-request-args-kwargs-response","title":"1. <code>get(self, request: Request, *args, **kwargs) -&gt; Response</code>","text":"<ul> <li>O que faz: M\u00e9todo abstrato para ser implementado em subclasses de views. Deve retornar um objeto <code>Response</code> do DRF.</li> <li>Como usar: Implemente este m\u00e9todo em sua view herdada para definir o comportamento do endpoint GET.</li> </ul>"},{"location":"power_bi/utils/mixin.html#2-mainself-list","title":"2. <code>main(self) -&gt; list</code>","text":"<ul> <li>O que faz: M\u00e9todo abstrato para ser implementado em pipelines ou tasks. Deve retornar uma lista de resultados.</li> <li>Como usar: Implemente este m\u00e9todo em sua pipeline herdada para definir o processamento principal.</li> </ul>"},{"location":"power_bi/utils/mixin.html#3-valid_dateself-data_inicio-str-data_fim-str","title":"3. <code>valid_date(self, data_inicio: str, data_fim: str)</code>","text":"<ul> <li>O que faz: Valida se as datas de in\u00edcio e fim s\u00e3o v\u00e1lidas e no formato correto (<code>aaaa-mm-dd</code>). Lan\u00e7a exce\u00e7\u00f5es amig\u00e1veis se as datas forem inv\u00e1lidas ou inconsistentes.</li> <li>Como usar: Chame este m\u00e9todo antes de processar filtros por data em pipelines ou views.</li> <li>Exemplo: <pre><code>data_inicio, data_fim = self.valid_date(\"2024-01-01\", \"2024-01-31\")\n</code></pre></li> </ul>"},{"location":"power_bi/utils/mixin.html#4-get_datasetself-query_set-modelsqueryset-schema-dict-pldataframe","title":"4. <code>get_dataset(self, query_set: models.QuerySet, schema: dict) -&gt; pl.DataFrame</code>","text":"<ul> <li>O que faz: Converte um queryset Django em um DataFrame Polars, aplicando um schema customizado e renomeando colunas conforme o schema.</li> <li>Como usar: Use para transformar dados do banco em DataFrame para processamento eficiente.</li> <li>Exemplo: <pre><code>df = self.get_dataset(MeuModel.objects.all(), schema)\n</code></pre></li> </ul>"},{"location":"power_bi/utils/mixin.html#5-generate_schema_from_modelself-model-models","title":"5. <code>generate_schema_from_model(self, model: models)</code>","text":"<ul> <li>O que faz: Gera um dicion\u00e1rio de schema a partir dos campos de um model Django, mapeando para tipos Polars.</li> <li>Como usar: Use para automatizar a cria\u00e7\u00e3o de schemas para DataFrames.</li> <li>Exemplo: <pre><code>schema = self.generate_schema_from_model(MeuModel)\n</code></pre></li> </ul>"},{"location":"power_bi/utils/mixin.html#6-get_polars_typeself-field-modelsfields","title":"6. <code>get_polars_type(self, field: models.fields)</code>","text":"<ul> <li>O que faz: Mapeia tipos de campo Django para tipos de dados Polars (ex: <code>CharField</code> vira <code>pl.String</code>, <code>IntegerField</code> vira <code>pl.Int64</code>).</li> <li>Como usar: Usado internamente por <code>generate_schema_from_model</code>, mas pode ser sobrescrito para suportar novos tipos.</li> </ul>"},{"location":"power_bi/utils/mixin.html#como-herdar-e-utilizar-o-mixin","title":"Como herdar e utilizar o mixin","text":"<p>Para usar os m\u00e9todos do <code>MixinViews</code>, basta herdar a classe na sua view, pipeline ou task:</p> <pre><code>from power_bi.utils.mixin import MixinViews\nclass MinhaPipeline(MixinViews):\ndef main(self):\ndata_inicio, data_fim = self.valid_date(\"2024-01-01\", \"2024-01-31\")\nschema = self.generate_schema_from_model(model=MeuModel)\ndf = self.get_dataset(query_set=MeuModel.objects.all(), schema=schema)\n# ...processamento...\n</code></pre> <ul> <li>Implemente os m\u00e9todos abstratos (<code>get</code>, <code>main</code>) conforme a necessidade da sua classe.</li> <li>Os m\u00e9todos utilit\u00e1rios (<code>valid_date</code>, <code>get_dataset</code>, etc.) ficam dispon\u00edveis para uso direto.</li> </ul>"},{"location":"power_bi/utils/mixin.html#funcionamento-esperado","title":"Funcionamento esperado","text":"<ul> <li>O mixin padroniza e centraliza l\u00f3gica comum, evitando repeti\u00e7\u00e3o de c\u00f3digo em m\u00faltiplas views/pipelines.</li> <li>Facilita a integra\u00e7\u00e3o entre Django ORM e Polars, al\u00e9m de garantir valida\u00e7\u00e3o consistente de datas e schemas.</li> </ul>"},{"location":"power_bi/utils/mixin.html#o-que-pode-e-nao-pode-alterar","title":"O que pode e n\u00e3o pode alterar","text":"<ul> <li>Pode: Adicionar novos m\u00e9todos utilit\u00e1rios, sobrescrever m\u00e9todos abstratos nas subclasses.</li> <li>N\u00e3o pode: Remover m\u00e9todos essenciais se outras classes dependem deles, ou alterar assinaturas sem atualizar todas as subclasses.</li> </ul> <p>Consulte o c\u00f3digo fonte para detalhes de implementa\u00e7\u00e3o de cada m\u00e9todo.</p>"}]}